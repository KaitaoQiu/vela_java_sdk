/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.cron_task.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import sdk.kubevela.cron_task.model.Env;
import sdk.kubevela.cron_task.model.HealthProbe;
import sdk.kubevela.cron_task.model.HostAliases;
import sdk.kubevela.cron_task.model.Volumes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.cron_task.JSON;

/**
 * CronTaskSpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:49:30.988608Z[Etc/UTC]")
public class CronTaskSpec {
  public static final String SERIALIZED_NAME_ACTIVE_DEADLINE_SECONDS = "activeDeadlineSeconds";
  @SerializedName(SERIALIZED_NAME_ACTIVE_DEADLINE_SECONDS)
  private Integer activeDeadlineSeconds;

  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Map<String, String> annotations = null;

  public static final String SERIALIZED_NAME_BACKOFF_LIMIT = "backoffLimit";
  @SerializedName(SERIALIZED_NAME_BACKOFF_LIMIT)
  private Integer backoffLimit = 6;

  public static final String SERIALIZED_NAME_CMD = "cmd";
  @SerializedName(SERIALIZED_NAME_CMD)
  private List<String> cmd = null;

  /**
   * Specifies how to treat concurrent executions of a Job
   */
  @JsonAdapter(ConcurrencyPolicyEnum.Adapter.class)
  public enum ConcurrencyPolicyEnum {
    ALLOW("Allow"),
    
    FORBID("Forbid"),
    
    REPLACE("Replace");

    private String value;

    ConcurrencyPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConcurrencyPolicyEnum fromValue(String value) {
      for (ConcurrencyPolicyEnum b : ConcurrencyPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConcurrencyPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConcurrencyPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConcurrencyPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConcurrencyPolicyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONCURRENCY_POLICY = "concurrencyPolicy";
  @SerializedName(SERIALIZED_NAME_CONCURRENCY_POLICY)
  private ConcurrencyPolicyEnum concurrencyPolicy = ConcurrencyPolicyEnum.ALLOW;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count = 1;

  public static final String SERIALIZED_NAME_CPU = "cpu";
  @SerializedName(SERIALIZED_NAME_CPU)
  private String cpu;

  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private List<Env> env = null;

  public static final String SERIALIZED_NAME_FAILED_JOBS_HISTORY_LIMIT = "failedJobsHistoryLimit";
  @SerializedName(SERIALIZED_NAME_FAILED_JOBS_HISTORY_LIMIT)
  private Integer failedJobsHistoryLimit = 1;

  public static final String SERIALIZED_NAME_HOST_ALIASES = "hostAliases";
  @SerializedName(SERIALIZED_NAME_HOST_ALIASES)
  private List<HostAliases> hostAliases = null;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  /**
   * Specify image pull policy for your service
   */
  @JsonAdapter(ImagePullPolicyEnum.Adapter.class)
  public enum ImagePullPolicyEnum {
    ALWAYS("Always"),
    
    NEVER("Never"),
    
    IFNOTPRESENT("IfNotPresent");

    private String value;

    ImagePullPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImagePullPolicyEnum fromValue(String value) {
      for (ImagePullPolicyEnum b : ImagePullPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImagePullPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImagePullPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImagePullPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImagePullPolicyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IMAGE_PULL_POLICY = "imagePullPolicy";
  @SerializedName(SERIALIZED_NAME_IMAGE_PULL_POLICY)
  private ImagePullPolicyEnum imagePullPolicy;

  public static final String SERIALIZED_NAME_IMAGE_PULL_SECRETS = "imagePullSecrets";
  @SerializedName(SERIALIZED_NAME_IMAGE_PULL_SECRETS)
  private List<String> imagePullSecrets = null;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = null;

  public static final String SERIALIZED_NAME_LIVENESS_PROBE = "livenessProbe";
  @SerializedName(SERIALIZED_NAME_LIVENESS_PROBE)
  private HealthProbe livenessProbe;

  public static final String SERIALIZED_NAME_MEMORY = "memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private String memory;

  public static final String SERIALIZED_NAME_READINESS_PROBE = "readinessProbe";
  @SerializedName(SERIALIZED_NAME_READINESS_PROBE)
  private HealthProbe readinessProbe;

  public static final String SERIALIZED_NAME_RESTART = "restart";
  @SerializedName(SERIALIZED_NAME_RESTART)
  private String restart = "Never";

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private String schedule;

  public static final String SERIALIZED_NAME_STARTING_DEADLINE_SECONDS = "startingDeadlineSeconds";
  @SerializedName(SERIALIZED_NAME_STARTING_DEADLINE_SECONDS)
  private Integer startingDeadlineSeconds;

  public static final String SERIALIZED_NAME_SUCCESSFUL_JOBS_HISTORY_LIMIT = "successfulJobsHistoryLimit";
  @SerializedName(SERIALIZED_NAME_SUCCESSFUL_JOBS_HISTORY_LIMIT)
  private Integer successfulJobsHistoryLimit = 3;

  public static final String SERIALIZED_NAME_SUSPEND = "suspend";
  @SerializedName(SERIALIZED_NAME_SUSPEND)
  private Boolean suspend = false;

  public static final String SERIALIZED_NAME_TTL_SECONDS_AFTER_FINISHED = "ttlSecondsAfterFinished";
  @SerializedName(SERIALIZED_NAME_TTL_SECONDS_AFTER_FINISHED)
  private Integer ttlSecondsAfterFinished;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<Volumes> volumes = null;

  public CronTaskSpec() {
  }

  public CronTaskSpec activeDeadlineSeconds(Integer activeDeadlineSeconds) {
    
    this.activeDeadlineSeconds = activeDeadlineSeconds;
    return this;
  }

   /**
   * The duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it
   * @return activeDeadlineSeconds
  **/
  @javax.annotation.Nullable

  public Integer getActiveDeadlineSeconds() {
    return activeDeadlineSeconds;
  }


  public void setActiveDeadlineSeconds(Integer activeDeadlineSeconds) {
    this.activeDeadlineSeconds = activeDeadlineSeconds;
  }


  public CronTaskSpec annotations(Map<String, String> annotations) {
    
    this.annotations = annotations;
    return this;
  }

  public CronTaskSpec putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

   /**
   * Specify the annotations in the workload
   * @return annotations
  **/
  @javax.annotation.Nullable

  public Map<String, String> getAnnotations() {
    return annotations;
  }


  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }


  public CronTaskSpec backoffLimit(Integer backoffLimit) {
    
    this.backoffLimit = backoffLimit;
    return this;
  }

   /**
   * The number of retries before marking this job failed
   * @return backoffLimit
  **/
  @javax.annotation.Nonnull

  public Integer getBackoffLimit() {
    return backoffLimit;
  }


  public void setBackoffLimit(Integer backoffLimit) {
    this.backoffLimit = backoffLimit;
  }


  public CronTaskSpec cmd(List<String> cmd) {
    
    this.cmd = cmd;
    return this;
  }

  public CronTaskSpec addCmdItem(String cmdItem) {
    if (this.cmd == null) {
      this.cmd = new ArrayList<>();
    }
    this.cmd.add(cmdItem);
    return this;
  }

   /**
   * Commands to run in the container
   * @return cmd
  **/
  @javax.annotation.Nullable

  public List<String> getCmd() {
    return cmd;
  }


  public void setCmd(List<String> cmd) {
    this.cmd = cmd;
  }


  public CronTaskSpec concurrencyPolicy(ConcurrencyPolicyEnum concurrencyPolicy) {
    
    this.concurrencyPolicy = concurrencyPolicy;
    return this;
  }

   /**
   * Specifies how to treat concurrent executions of a Job
   * @return concurrencyPolicy
  **/
  @javax.annotation.Nonnull

  public ConcurrencyPolicyEnum getConcurrencyPolicy() {
    return concurrencyPolicy;
  }


  public void setConcurrencyPolicy(ConcurrencyPolicyEnum concurrencyPolicy) {
    this.concurrencyPolicy = concurrencyPolicy;
  }


  public CronTaskSpec count(Integer count) {
    
    this.count = count;
    return this;
  }

   /**
   * Specify number of tasks to run in parallel +short&#x3D;c
   * @return count
  **/
  @javax.annotation.Nonnull

  public Integer getCount() {
    return count;
  }


  public void setCount(Integer count) {
    this.count = count;
  }


  public CronTaskSpec cpu(String cpu) {
    
    this.cpu = cpu;
    return this;
  }

   /**
   * Number of CPU units for the service, like &#x60;0.5&#x60; (0.5 CPU core), &#x60;1&#x60; (1 CPU core)
   * @return cpu
  **/
  @javax.annotation.Nullable

  public String getCpu() {
    return cpu;
  }


  public void setCpu(String cpu) {
    this.cpu = cpu;
  }


  public CronTaskSpec env(List<Env> env) {
    
    this.env = env;
    return this;
  }

  public CronTaskSpec addEnvItem(Env envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

   /**
   * Define arguments by using environment variables
   * @return env
  **/
  @javax.annotation.Nullable

  public List<Env> getEnv() {
    return env;
  }


  public void setEnv(List<Env> env) {
    this.env = env;
  }


  public CronTaskSpec failedJobsHistoryLimit(Integer failedJobsHistoryLimit) {
    
    this.failedJobsHistoryLimit = failedJobsHistoryLimit;
    return this;
  }

   /**
   * The number of failed finished jobs to retain
   * @return failedJobsHistoryLimit
  **/
  @javax.annotation.Nonnull

  public Integer getFailedJobsHistoryLimit() {
    return failedJobsHistoryLimit;
  }


  public void setFailedJobsHistoryLimit(Integer failedJobsHistoryLimit) {
    this.failedJobsHistoryLimit = failedJobsHistoryLimit;
  }


  public CronTaskSpec hostAliases(List<HostAliases> hostAliases) {
    
    this.hostAliases = hostAliases;
    return this;
  }

  public CronTaskSpec addHostAliasesItem(HostAliases hostAliasesItem) {
    if (this.hostAliases == null) {
      this.hostAliases = new ArrayList<>();
    }
    this.hostAliases.add(hostAliasesItem);
    return this;
  }

   /**
   * An optional list of hosts and IPs that will be injected into the pod&#39;s hosts file
   * @return hostAliases
  **/
  @javax.annotation.Nullable

  public List<HostAliases> getHostAliases() {
    return hostAliases;
  }


  public void setHostAliases(List<HostAliases> hostAliases) {
    this.hostAliases = hostAliases;
  }


  public CronTaskSpec image(String image) {
    
    this.image = image;
    return this;
  }

   /**
   * Which image would you like to use for your service +short&#x3D;i
   * @return image
  **/
  @javax.annotation.Nonnull

  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    this.image = image;
  }


  public CronTaskSpec imagePullPolicy(ImagePullPolicyEnum imagePullPolicy) {
    
    this.imagePullPolicy = imagePullPolicy;
    return this;
  }

   /**
   * Specify image pull policy for your service
   * @return imagePullPolicy
  **/
  @javax.annotation.Nullable

  public ImagePullPolicyEnum getImagePullPolicy() {
    return imagePullPolicy;
  }


  public void setImagePullPolicy(ImagePullPolicyEnum imagePullPolicy) {
    this.imagePullPolicy = imagePullPolicy;
  }


  public CronTaskSpec imagePullSecrets(List<String> imagePullSecrets) {
    
    this.imagePullSecrets = imagePullSecrets;
    return this;
  }

  public CronTaskSpec addImagePullSecretsItem(String imagePullSecretsItem) {
    if (this.imagePullSecrets == null) {
      this.imagePullSecrets = new ArrayList<>();
    }
    this.imagePullSecrets.add(imagePullSecretsItem);
    return this;
  }

   /**
   * Specify image pull secrets for your service
   * @return imagePullSecrets
  **/
  @javax.annotation.Nullable

  public List<String> getImagePullSecrets() {
    return imagePullSecrets;
  }


  public void setImagePullSecrets(List<String> imagePullSecrets) {
    this.imagePullSecrets = imagePullSecrets;
  }


  public CronTaskSpec labels(Map<String, String> labels) {
    
    this.labels = labels;
    return this;
  }

  public CronTaskSpec putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

   /**
   * Specify the labels in the workload
   * @return labels
  **/
  @javax.annotation.Nullable

  public Map<String, String> getLabels() {
    return labels;
  }


  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public CronTaskSpec livenessProbe(HealthProbe livenessProbe) {
    
    this.livenessProbe = livenessProbe;
    return this;
  }

   /**
   * Get livenessProbe
   * @return livenessProbe
  **/
  @javax.annotation.Nullable

  public HealthProbe getLivenessProbe() {
    return livenessProbe;
  }


  public void setLivenessProbe(HealthProbe livenessProbe) {
    this.livenessProbe = livenessProbe;
  }


  public CronTaskSpec memory(String memory) {
    
    this.memory = memory;
    return this;
  }

   /**
   * Specifies the attributes of the memory resource required for the container.
   * @return memory
  **/
  @javax.annotation.Nullable

  public String getMemory() {
    return memory;
  }


  public void setMemory(String memory) {
    this.memory = memory;
  }


  public CronTaskSpec readinessProbe(HealthProbe readinessProbe) {
    
    this.readinessProbe = readinessProbe;
    return this;
  }

   /**
   * Get readinessProbe
   * @return readinessProbe
  **/
  @javax.annotation.Nullable

  public HealthProbe getReadinessProbe() {
    return readinessProbe;
  }


  public void setReadinessProbe(HealthProbe readinessProbe) {
    this.readinessProbe = readinessProbe;
  }


  public CronTaskSpec restart(String restart) {
    
    this.restart = restart;
    return this;
  }

   /**
   * Define the job restart policy, the value can only be Never or OnFailure. By default, it&#39;s Never.
   * @return restart
  **/
  @javax.annotation.Nonnull

  public String getRestart() {
    return restart;
  }


  public void setRestart(String restart) {
    this.restart = restart;
  }


  public CronTaskSpec schedule(String schedule) {
    
    this.schedule = schedule;
    return this;
  }

   /**
   * Specify the schedule in Cron format, see https://en.wikipedia.org/wiki/Cron
   * @return schedule
  **/
  @javax.annotation.Nonnull

  public String getSchedule() {
    return schedule;
  }


  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }


  public CronTaskSpec startingDeadlineSeconds(Integer startingDeadlineSeconds) {
    
    this.startingDeadlineSeconds = startingDeadlineSeconds;
    return this;
  }

   /**
   * Specify deadline in seconds for starting the job if it misses scheduled
   * @return startingDeadlineSeconds
  **/
  @javax.annotation.Nullable

  public Integer getStartingDeadlineSeconds() {
    return startingDeadlineSeconds;
  }


  public void setStartingDeadlineSeconds(Integer startingDeadlineSeconds) {
    this.startingDeadlineSeconds = startingDeadlineSeconds;
  }


  public CronTaskSpec successfulJobsHistoryLimit(Integer successfulJobsHistoryLimit) {
    
    this.successfulJobsHistoryLimit = successfulJobsHistoryLimit;
    return this;
  }

   /**
   * The number of successful finished jobs to retain
   * @return successfulJobsHistoryLimit
  **/
  @javax.annotation.Nonnull

  public Integer getSuccessfulJobsHistoryLimit() {
    return successfulJobsHistoryLimit;
  }


  public void setSuccessfulJobsHistoryLimit(Integer successfulJobsHistoryLimit) {
    this.successfulJobsHistoryLimit = successfulJobsHistoryLimit;
  }


  public CronTaskSpec suspend(Boolean suspend) {
    
    this.suspend = suspend;
    return this;
  }

   /**
   * suspend subsequent executions
   * @return suspend
  **/
  @javax.annotation.Nonnull

  public Boolean getSuspend() {
    return suspend;
  }


  public void setSuspend(Boolean suspend) {
    this.suspend = suspend;
  }


  public CronTaskSpec ttlSecondsAfterFinished(Integer ttlSecondsAfterFinished) {
    
    this.ttlSecondsAfterFinished = ttlSecondsAfterFinished;
    return this;
  }

   /**
   * Limits the lifetime of a Job that has finished
   * @return ttlSecondsAfterFinished
  **/
  @javax.annotation.Nullable

  public Integer getTtlSecondsAfterFinished() {
    return ttlSecondsAfterFinished;
  }


  public void setTtlSecondsAfterFinished(Integer ttlSecondsAfterFinished) {
    this.ttlSecondsAfterFinished = ttlSecondsAfterFinished;
  }


  public CronTaskSpec volumes(List<Volumes> volumes) {
    
    this.volumes = volumes;
    return this;
  }

  public CronTaskSpec addVolumesItem(Volumes volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

   /**
   * Declare volumes and volumeMounts
   * @return volumes
  **/
  @javax.annotation.Nullable

  public List<Volumes> getVolumes() {
    return volumes;
  }


  public void setVolumes(List<Volumes> volumes) {
    this.volumes = volumes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CronTaskSpec cronTaskSpec = (CronTaskSpec) o;
    return Objects.equals(this.activeDeadlineSeconds, cronTaskSpec.activeDeadlineSeconds) &&
        Objects.equals(this.annotations, cronTaskSpec.annotations) &&
        Objects.equals(this.backoffLimit, cronTaskSpec.backoffLimit) &&
        Objects.equals(this.cmd, cronTaskSpec.cmd) &&
        Objects.equals(this.concurrencyPolicy, cronTaskSpec.concurrencyPolicy) &&
        Objects.equals(this.count, cronTaskSpec.count) &&
        Objects.equals(this.cpu, cronTaskSpec.cpu) &&
        Objects.equals(this.env, cronTaskSpec.env) &&
        Objects.equals(this.failedJobsHistoryLimit, cronTaskSpec.failedJobsHistoryLimit) &&
        Objects.equals(this.hostAliases, cronTaskSpec.hostAliases) &&
        Objects.equals(this.image, cronTaskSpec.image) &&
        Objects.equals(this.imagePullPolicy, cronTaskSpec.imagePullPolicy) &&
        Objects.equals(this.imagePullSecrets, cronTaskSpec.imagePullSecrets) &&
        Objects.equals(this.labels, cronTaskSpec.labels) &&
        Objects.equals(this.livenessProbe, cronTaskSpec.livenessProbe) &&
        Objects.equals(this.memory, cronTaskSpec.memory) &&
        Objects.equals(this.readinessProbe, cronTaskSpec.readinessProbe) &&
        Objects.equals(this.restart, cronTaskSpec.restart) &&
        Objects.equals(this.schedule, cronTaskSpec.schedule) &&
        Objects.equals(this.startingDeadlineSeconds, cronTaskSpec.startingDeadlineSeconds) &&
        Objects.equals(this.successfulJobsHistoryLimit, cronTaskSpec.successfulJobsHistoryLimit) &&
        Objects.equals(this.suspend, cronTaskSpec.suspend) &&
        Objects.equals(this.ttlSecondsAfterFinished, cronTaskSpec.ttlSecondsAfterFinished) &&
        Objects.equals(this.volumes, cronTaskSpec.volumes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeDeadlineSeconds, annotations, backoffLimit, cmd, concurrencyPolicy, count, cpu, env, failedJobsHistoryLimit, hostAliases, image, imagePullPolicy, imagePullSecrets, labels, livenessProbe, memory, readinessProbe, restart, schedule, startingDeadlineSeconds, successfulJobsHistoryLimit, suspend, ttlSecondsAfterFinished, volumes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CronTaskSpec {\n");
    sb.append("    activeDeadlineSeconds: ").append(toIndentedString(activeDeadlineSeconds)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    backoffLimit: ").append(toIndentedString(backoffLimit)).append("\n");
    sb.append("    cmd: ").append(toIndentedString(cmd)).append("\n");
    sb.append("    concurrencyPolicy: ").append(toIndentedString(concurrencyPolicy)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    failedJobsHistoryLimit: ").append(toIndentedString(failedJobsHistoryLimit)).append("\n");
    sb.append("    hostAliases: ").append(toIndentedString(hostAliases)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imagePullPolicy: ").append(toIndentedString(imagePullPolicy)).append("\n");
    sb.append("    imagePullSecrets: ").append(toIndentedString(imagePullSecrets)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    livenessProbe: ").append(toIndentedString(livenessProbe)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    readinessProbe: ").append(toIndentedString(readinessProbe)).append("\n");
    sb.append("    restart: ").append(toIndentedString(restart)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    startingDeadlineSeconds: ").append(toIndentedString(startingDeadlineSeconds)).append("\n");
    sb.append("    successfulJobsHistoryLimit: ").append(toIndentedString(successfulJobsHistoryLimit)).append("\n");
    sb.append("    suspend: ").append(toIndentedString(suspend)).append("\n");
    sb.append("    ttlSecondsAfterFinished: ").append(toIndentedString(ttlSecondsAfterFinished)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeDeadlineSeconds");
    openapiFields.add("annotations");
    openapiFields.add("backoffLimit");
    openapiFields.add("cmd");
    openapiFields.add("concurrencyPolicy");
    openapiFields.add("count");
    openapiFields.add("cpu");
    openapiFields.add("env");
    openapiFields.add("failedJobsHistoryLimit");
    openapiFields.add("hostAliases");
    openapiFields.add("image");
    openapiFields.add("imagePullPolicy");
    openapiFields.add("imagePullSecrets");
    openapiFields.add("labels");
    openapiFields.add("livenessProbe");
    openapiFields.add("memory");
    openapiFields.add("readinessProbe");
    openapiFields.add("restart");
    openapiFields.add("schedule");
    openapiFields.add("startingDeadlineSeconds");
    openapiFields.add("successfulJobsHistoryLimit");
    openapiFields.add("suspend");
    openapiFields.add("ttlSecondsAfterFinished");
    openapiFields.add("volumes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("backoffLimit");
    openapiRequiredFields.add("concurrencyPolicy");
    openapiRequiredFields.add("count");
    openapiRequiredFields.add("failedJobsHistoryLimit");
    openapiRequiredFields.add("image");
    openapiRequiredFields.add("restart");
    openapiRequiredFields.add("schedule");
    openapiRequiredFields.add("successfulJobsHistoryLimit");
    openapiRequiredFields.add("suspend");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CronTaskSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CronTaskSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CronTaskSpec is not found in the empty JSON string", CronTaskSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CronTaskSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CronTaskSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CronTaskSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cmd") != null && !jsonObj.get("cmd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cmd` to be an array in the JSON string but got `%s`", jsonObj.get("cmd").toString()));
      }
      if (!jsonObj.get("concurrencyPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concurrencyPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concurrencyPolicy").toString()));
      }
      if ((jsonObj.get("cpu") != null && !jsonObj.get("cpu").isJsonNull()) && !jsonObj.get("cpu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpu").toString()));
      }
      if (jsonObj.get("env") != null && !jsonObj.get("env").isJsonNull()) {
        JsonArray jsonArrayenv = jsonObj.getAsJsonArray("env");
        if (jsonArrayenv != null) {
          // ensure the json data is an array
          if (!jsonObj.get("env").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `env` to be an array in the JSON string but got `%s`", jsonObj.get("env").toString()));
          }

          // validate the optional field `env` (array)
          for (int i = 0; i < jsonArrayenv.size(); i++) {
            Env.validateJsonObject(jsonArrayenv.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("hostAliases") != null && !jsonObj.get("hostAliases").isJsonNull()) {
        JsonArray jsonArrayhostAliases = jsonObj.getAsJsonArray("hostAliases");
        if (jsonArrayhostAliases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hostAliases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hostAliases` to be an array in the JSON string but got `%s`", jsonObj.get("hostAliases").toString()));
          }

          // validate the optional field `hostAliases` (array)
          for (int i = 0; i < jsonArrayhostAliases.size(); i++) {
            HostAliases.validateJsonObject(jsonArrayhostAliases.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("imagePullPolicy") != null && !jsonObj.get("imagePullPolicy").isJsonNull()) && !jsonObj.get("imagePullPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imagePullPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imagePullPolicy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("imagePullSecrets") != null && !jsonObj.get("imagePullSecrets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `imagePullSecrets` to be an array in the JSON string but got `%s`", jsonObj.get("imagePullSecrets").toString()));
      }
      // validate the optional field `livenessProbe`
      if (jsonObj.get("livenessProbe") != null && !jsonObj.get("livenessProbe").isJsonNull()) {
        HealthProbe.validateJsonObject(jsonObj.getAsJsonObject("livenessProbe"));
      }
      if ((jsonObj.get("memory") != null && !jsonObj.get("memory").isJsonNull()) && !jsonObj.get("memory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memory").toString()));
      }
      // validate the optional field `readinessProbe`
      if (jsonObj.get("readinessProbe") != null && !jsonObj.get("readinessProbe").isJsonNull()) {
        HealthProbe.validateJsonObject(jsonObj.getAsJsonObject("readinessProbe"));
      }
      if (!jsonObj.get("restart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restart").toString()));
      }
      if (!jsonObj.get("schedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule").toString()));
      }
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        JsonArray jsonArrayvolumes = jsonObj.getAsJsonArray("volumes");
        if (jsonArrayvolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumes` to be an array in the JSON string but got `%s`", jsonObj.get("volumes").toString()));
          }

          // validate the optional field `volumes` (array)
          for (int i = 0; i < jsonArrayvolumes.size(); i++) {
            Volumes.validateJsonObject(jsonArrayvolumes.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CronTaskSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CronTaskSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CronTaskSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CronTaskSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<CronTaskSpec>() {
           @Override
           public void write(JsonWriter out, CronTaskSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CronTaskSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CronTaskSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CronTaskSpec
  * @throws IOException if the JSON string is invalid with respect to CronTaskSpec
  */
  public static CronTaskSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CronTaskSpec.class);
  }

 /**
  * Convert an instance of CronTaskSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


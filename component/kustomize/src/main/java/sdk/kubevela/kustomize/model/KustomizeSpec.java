/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.kustomize.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.kustomize.JSON;

/**
 * KustomizeSpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:50:12.179304Z[Etc/UTC]")
public class KustomizeSpec {
  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch = "master";

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PULL_INTERVAL = "pullInterval";
  @SerializedName(SERIALIZED_NAME_PULL_INTERVAL)
  private String pullInterval = "1m";

  public static final String SERIALIZED_NAME_REPO_URL = "repoUrl";
  @SerializedName(SERIALIZED_NAME_REPO_URL)
  private String repoUrl;

  public KustomizeSpec() {
  }

  public KustomizeSpec branch(String branch) {
    
    this.branch = branch;
    return this;
  }

   /**
   * The Git reference to checkout and monitor for changes, defaults to master branch.
   * @return branch
  **/
  @javax.annotation.Nonnull

  public String getBranch() {
    return branch;
  }


  public void setBranch(String branch) {
    this.branch = branch;
  }


  public KustomizeSpec path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * Path to the directory containing the kustomization.yaml file, or the set of plain YAMLs a kustomization.yaml should be generated for.
   * @return path
  **/
  @javax.annotation.Nonnull

  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }


  public KustomizeSpec pullInterval(String pullInterval) {
    
    this.pullInterval = pullInterval;
    return this;
  }

   /**
   * The interval at which to check for repository updates.
   * @return pullInterval
  **/
  @javax.annotation.Nonnull

  public String getPullInterval() {
    return pullInterval;
  }


  public void setPullInterval(String pullInterval) {
    this.pullInterval = pullInterval;
  }


  public KustomizeSpec repoUrl(String repoUrl) {
    
    this.repoUrl = repoUrl;
    return this;
  }

   /**
   * The repository URL, can be a HTTP/S or SSH address.
   * @return repoUrl
  **/
  @javax.annotation.Nonnull

  public String getRepoUrl() {
    return repoUrl;
  }


  public void setRepoUrl(String repoUrl) {
    this.repoUrl = repoUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KustomizeSpec kustomizeSpec = (KustomizeSpec) o;
    return Objects.equals(this.branch, kustomizeSpec.branch) &&
        Objects.equals(this.path, kustomizeSpec.path) &&
        Objects.equals(this.pullInterval, kustomizeSpec.pullInterval) &&
        Objects.equals(this.repoUrl, kustomizeSpec.repoUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branch, path, pullInterval, repoUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KustomizeSpec {\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    pullInterval: ").append(toIndentedString(pullInterval)).append("\n");
    sb.append("    repoUrl: ").append(toIndentedString(repoUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("branch");
    openapiFields.add("path");
    openapiFields.add("pullInterval");
    openapiFields.add("repoUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("branch");
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("pullInterval");
    openapiRequiredFields.add("repoUrl");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to KustomizeSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!KustomizeSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KustomizeSpec is not found in the empty JSON string", KustomizeSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!KustomizeSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KustomizeSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : KustomizeSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch").toString()));
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (!jsonObj.get("pullInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pullInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pullInterval").toString()));
      }
      if (!jsonObj.get("repoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repoUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KustomizeSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KustomizeSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KustomizeSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KustomizeSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<KustomizeSpec>() {
           @Override
           public void write(JsonWriter out, KustomizeSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KustomizeSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KustomizeSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KustomizeSpec
  * @throws IOException if the JSON string is invalid with respect to KustomizeSpec
  */
  public static KustomizeSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KustomizeSpec.class);
  }

 /**
  * Convert an instance of KustomizeSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


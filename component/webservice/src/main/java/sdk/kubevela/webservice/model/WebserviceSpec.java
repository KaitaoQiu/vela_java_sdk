/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.webservice.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import sdk.kubevela.webservice.model.Env;
import sdk.kubevela.webservice.model.HealthProbe;
import sdk.kubevela.webservice.model.HostAliases;
import sdk.kubevela.webservice.model.Ports;
import sdk.kubevela.webservice.model.VolumeMounts;
import sdk.kubevela.webservice.model.Volumes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.webservice.JSON;

/**
 * WebserviceSpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:51:18.842771Z[Etc/UTC]")
public class WebserviceSpec {
  public static final String SERIALIZED_NAME_ADD_REVISION_LABEL = "addRevisionLabel";
  @SerializedName(SERIALIZED_NAME_ADD_REVISION_LABEL)
  private Boolean addRevisionLabel = false;

  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Map<String, String> annotations = null;

  public static final String SERIALIZED_NAME_ARGS = "args";
  @SerializedName(SERIALIZED_NAME_ARGS)
  private List<String> args = null;

  public static final String SERIALIZED_NAME_CMD = "cmd";
  @SerializedName(SERIALIZED_NAME_CMD)
  private List<String> cmd = null;

  public static final String SERIALIZED_NAME_CPU = "cpu";
  @SerializedName(SERIALIZED_NAME_CPU)
  private String cpu;

  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private List<Env> env = null;

  /**
   * Gets or Sets exposeType
   */
  @JsonAdapter(ExposeTypeEnum.Adapter.class)
  public enum ExposeTypeEnum {
    CLUSTERIP("ClusterIP"),
    
    NODEPORT("NodePort"),
    
    LOADBALANCER("LoadBalancer");

    private String value;

    ExposeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExposeTypeEnum fromValue(String value) {
      for (ExposeTypeEnum b : ExposeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExposeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExposeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExposeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExposeTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EXPOSE_TYPE = "exposeType";
  @SerializedName(SERIALIZED_NAME_EXPOSE_TYPE)
  private ExposeTypeEnum exposeType = ExposeTypeEnum.CLUSTERIP;

  public static final String SERIALIZED_NAME_HOST_ALIASES = "hostAliases";
  @SerializedName(SERIALIZED_NAME_HOST_ALIASES)
  private List<HostAliases> hostAliases = null;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  /**
   * Specify image pull policy for your service
   */
  @JsonAdapter(ImagePullPolicyEnum.Adapter.class)
  public enum ImagePullPolicyEnum {
    ALWAYS("Always"),
    
    NEVER("Never"),
    
    IFNOTPRESENT("IfNotPresent");

    private String value;

    ImagePullPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImagePullPolicyEnum fromValue(String value) {
      for (ImagePullPolicyEnum b : ImagePullPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImagePullPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImagePullPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImagePullPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImagePullPolicyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IMAGE_PULL_POLICY = "imagePullPolicy";
  @SerializedName(SERIALIZED_NAME_IMAGE_PULL_POLICY)
  private ImagePullPolicyEnum imagePullPolicy;

  public static final String SERIALIZED_NAME_IMAGE_PULL_SECRETS = "imagePullSecrets";
  @SerializedName(SERIALIZED_NAME_IMAGE_PULL_SECRETS)
  private List<String> imagePullSecrets = null;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = null;

  public static final String SERIALIZED_NAME_LIVENESS_PROBE = "livenessProbe";
  @SerializedName(SERIALIZED_NAME_LIVENESS_PROBE)
  private HealthProbe livenessProbe;

  public static final String SERIALIZED_NAME_MEMORY = "memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private String memory;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PORTS = "ports";
  @SerializedName(SERIALIZED_NAME_PORTS)
  private List<Ports> ports = null;

  public static final String SERIALIZED_NAME_READINESS_PROBE = "readinessProbe";
  @SerializedName(SERIALIZED_NAME_READINESS_PROBE)
  private HealthProbe readinessProbe;

  public static final String SERIALIZED_NAME_VOLUME_MOUNTS = "volumeMounts";
  @SerializedName(SERIALIZED_NAME_VOLUME_MOUNTS)
  private VolumeMounts volumeMounts;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<Volumes> volumes = null;

  public WebserviceSpec() {
  }

  public WebserviceSpec addRevisionLabel(Boolean addRevisionLabel) {
    
    this.addRevisionLabel = addRevisionLabel;
    return this;
  }

   /**
   * Get addRevisionLabel
   * @return addRevisionLabel
  **/
  @javax.annotation.Nonnull

  public Boolean getAddRevisionLabel() {
    return addRevisionLabel;
  }


  public void setAddRevisionLabel(Boolean addRevisionLabel) {
    this.addRevisionLabel = addRevisionLabel;
  }


  public WebserviceSpec annotations(Map<String, String> annotations) {
    
    this.annotations = annotations;
    return this;
  }

  public WebserviceSpec putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

   /**
   * Specify the annotations in the workload
   * @return annotations
  **/
  @javax.annotation.Nullable

  public Map<String, String> getAnnotations() {
    return annotations;
  }


  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }


  public WebserviceSpec args(List<String> args) {
    
    this.args = args;
    return this;
  }

  public WebserviceSpec addArgsItem(String argsItem) {
    if (this.args == null) {
      this.args = new ArrayList<>();
    }
    this.args.add(argsItem);
    return this;
  }

   /**
   * Arguments to the entrypoint
   * @return args
  **/
  @javax.annotation.Nullable

  public List<String> getArgs() {
    return args;
  }


  public void setArgs(List<String> args) {
    this.args = args;
  }


  public WebserviceSpec cmd(List<String> cmd) {
    
    this.cmd = cmd;
    return this;
  }

  public WebserviceSpec addCmdItem(String cmdItem) {
    if (this.cmd == null) {
      this.cmd = new ArrayList<>();
    }
    this.cmd.add(cmdItem);
    return this;
  }

   /**
   * Commands to run in the container
   * @return cmd
  **/
  @javax.annotation.Nullable

  public List<String> getCmd() {
    return cmd;
  }


  public void setCmd(List<String> cmd) {
    this.cmd = cmd;
  }


  public WebserviceSpec cpu(String cpu) {
    
    this.cpu = cpu;
    return this;
  }

   /**
   * Number of CPU units for the service, like &#x60;0.5&#x60; (0.5 CPU core), &#x60;1&#x60; (1 CPU core)
   * @return cpu
  **/
  @javax.annotation.Nullable

  public String getCpu() {
    return cpu;
  }


  public void setCpu(String cpu) {
    this.cpu = cpu;
  }


  public WebserviceSpec env(List<Env> env) {
    
    this.env = env;
    return this;
  }

  public WebserviceSpec addEnvItem(Env envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

   /**
   * Define arguments by using environment variables
   * @return env
  **/
  @javax.annotation.Nullable

  public List<Env> getEnv() {
    return env;
  }


  public void setEnv(List<Env> env) {
    this.env = env;
  }


  public WebserviceSpec exposeType(ExposeTypeEnum exposeType) {
    
    this.exposeType = exposeType;
    return this;
  }

   /**
   * Get exposeType
   * @return exposeType
  **/
  @javax.annotation.Nonnull

  public ExposeTypeEnum getExposeType() {
    return exposeType;
  }


  public void setExposeType(ExposeTypeEnum exposeType) {
    this.exposeType = exposeType;
  }


  public WebserviceSpec hostAliases(List<HostAliases> hostAliases) {
    
    this.hostAliases = hostAliases;
    return this;
  }

  public WebserviceSpec addHostAliasesItem(HostAliases hostAliasesItem) {
    if (this.hostAliases == null) {
      this.hostAliases = new ArrayList<>();
    }
    this.hostAliases.add(hostAliasesItem);
    return this;
  }

   /**
   * Specify the hostAliases to add
   * @return hostAliases
  **/
  @javax.annotation.Nullable

  public List<HostAliases> getHostAliases() {
    return hostAliases;
  }


  public void setHostAliases(List<HostAliases> hostAliases) {
    this.hostAliases = hostAliases;
  }


  public WebserviceSpec image(String image) {
    
    this.image = image;
    return this;
  }

   /**
   * Which image would you like to use for your service +short&#x3D;i
   * @return image
  **/
  @javax.annotation.Nonnull

  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    this.image = image;
  }


  public WebserviceSpec imagePullPolicy(ImagePullPolicyEnum imagePullPolicy) {
    
    this.imagePullPolicy = imagePullPolicy;
    return this;
  }

   /**
   * Specify image pull policy for your service
   * @return imagePullPolicy
  **/
  @javax.annotation.Nullable

  public ImagePullPolicyEnum getImagePullPolicy() {
    return imagePullPolicy;
  }


  public void setImagePullPolicy(ImagePullPolicyEnum imagePullPolicy) {
    this.imagePullPolicy = imagePullPolicy;
  }


  public WebserviceSpec imagePullSecrets(List<String> imagePullSecrets) {
    
    this.imagePullSecrets = imagePullSecrets;
    return this;
  }

  public WebserviceSpec addImagePullSecretsItem(String imagePullSecretsItem) {
    if (this.imagePullSecrets == null) {
      this.imagePullSecrets = new ArrayList<>();
    }
    this.imagePullSecrets.add(imagePullSecretsItem);
    return this;
  }

   /**
   * Specify image pull secrets for your service
   * @return imagePullSecrets
  **/
  @javax.annotation.Nullable

  public List<String> getImagePullSecrets() {
    return imagePullSecrets;
  }


  public void setImagePullSecrets(List<String> imagePullSecrets) {
    this.imagePullSecrets = imagePullSecrets;
  }


  public WebserviceSpec labels(Map<String, String> labels) {
    
    this.labels = labels;
    return this;
  }

  public WebserviceSpec putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

   /**
   * Specify the labels in the workload
   * @return labels
  **/
  @javax.annotation.Nullable

  public Map<String, String> getLabels() {
    return labels;
  }


  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public WebserviceSpec livenessProbe(HealthProbe livenessProbe) {
    
    this.livenessProbe = livenessProbe;
    return this;
  }

   /**
   * Get livenessProbe
   * @return livenessProbe
  **/
  @javax.annotation.Nullable

  public HealthProbe getLivenessProbe() {
    return livenessProbe;
  }


  public void setLivenessProbe(HealthProbe livenessProbe) {
    this.livenessProbe = livenessProbe;
  }


  public WebserviceSpec memory(String memory) {
    
    this.memory = memory;
    return this;
  }

   /**
   * Specifies the attributes of the memory resource required for the container.
   * @return memory
  **/
  @javax.annotation.Nullable

  public String getMemory() {
    return memory;
  }


  public void setMemory(String memory) {
    this.memory = memory;
  }


  public WebserviceSpec port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @javax.annotation.Nullable

  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }


  public WebserviceSpec ports(List<Ports> ports) {
    
    this.ports = ports;
    return this;
  }

  public WebserviceSpec addPortsItem(Ports portsItem) {
    if (this.ports == null) {
      this.ports = new ArrayList<>();
    }
    this.ports.add(portsItem);
    return this;
  }

   /**
   * Which ports do you want customer traffic sent to, defaults to 80
   * @return ports
  **/
  @javax.annotation.Nullable

  public List<Ports> getPorts() {
    return ports;
  }


  public void setPorts(List<Ports> ports) {
    this.ports = ports;
  }


  public WebserviceSpec readinessProbe(HealthProbe readinessProbe) {
    
    this.readinessProbe = readinessProbe;
    return this;
  }

   /**
   * Get readinessProbe
   * @return readinessProbe
  **/
  @javax.annotation.Nullable

  public HealthProbe getReadinessProbe() {
    return readinessProbe;
  }


  public void setReadinessProbe(HealthProbe readinessProbe) {
    this.readinessProbe = readinessProbe;
  }


  public WebserviceSpec volumeMounts(VolumeMounts volumeMounts) {
    
    this.volumeMounts = volumeMounts;
    return this;
  }

   /**
   * Get volumeMounts
   * @return volumeMounts
  **/
  @javax.annotation.Nullable

  public VolumeMounts getVolumeMounts() {
    return volumeMounts;
  }


  public void setVolumeMounts(VolumeMounts volumeMounts) {
    this.volumeMounts = volumeMounts;
  }


  public WebserviceSpec volumes(List<Volumes> volumes) {
    
    this.volumes = volumes;
    return this;
  }

  public WebserviceSpec addVolumesItem(Volumes volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

   /**
   * Deprecated field, use volumeMounts instead.
   * @return volumes
  **/
  @javax.annotation.Nullable

  public List<Volumes> getVolumes() {
    return volumes;
  }


  public void setVolumes(List<Volumes> volumes) {
    this.volumes = volumes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebserviceSpec webserviceSpec = (WebserviceSpec) o;
    return Objects.equals(this.addRevisionLabel, webserviceSpec.addRevisionLabel) &&
        Objects.equals(this.annotations, webserviceSpec.annotations) &&
        Objects.equals(this.args, webserviceSpec.args) &&
        Objects.equals(this.cmd, webserviceSpec.cmd) &&
        Objects.equals(this.cpu, webserviceSpec.cpu) &&
        Objects.equals(this.env, webserviceSpec.env) &&
        Objects.equals(this.exposeType, webserviceSpec.exposeType) &&
        Objects.equals(this.hostAliases, webserviceSpec.hostAliases) &&
        Objects.equals(this.image, webserviceSpec.image) &&
        Objects.equals(this.imagePullPolicy, webserviceSpec.imagePullPolicy) &&
        Objects.equals(this.imagePullSecrets, webserviceSpec.imagePullSecrets) &&
        Objects.equals(this.labels, webserviceSpec.labels) &&
        Objects.equals(this.livenessProbe, webserviceSpec.livenessProbe) &&
        Objects.equals(this.memory, webserviceSpec.memory) &&
        Objects.equals(this.port, webserviceSpec.port) &&
        Objects.equals(this.ports, webserviceSpec.ports) &&
        Objects.equals(this.readinessProbe, webserviceSpec.readinessProbe) &&
        Objects.equals(this.volumeMounts, webserviceSpec.volumeMounts) &&
        Objects.equals(this.volumes, webserviceSpec.volumes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addRevisionLabel, annotations, args, cmd, cpu, env, exposeType, hostAliases, image, imagePullPolicy, imagePullSecrets, labels, livenessProbe, memory, port, ports, readinessProbe, volumeMounts, volumes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebserviceSpec {\n");
    sb.append("    addRevisionLabel: ").append(toIndentedString(addRevisionLabel)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    cmd: ").append(toIndentedString(cmd)).append("\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    exposeType: ").append(toIndentedString(exposeType)).append("\n");
    sb.append("    hostAliases: ").append(toIndentedString(hostAliases)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imagePullPolicy: ").append(toIndentedString(imagePullPolicy)).append("\n");
    sb.append("    imagePullSecrets: ").append(toIndentedString(imagePullSecrets)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    livenessProbe: ").append(toIndentedString(livenessProbe)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    ports: ").append(toIndentedString(ports)).append("\n");
    sb.append("    readinessProbe: ").append(toIndentedString(readinessProbe)).append("\n");
    sb.append("    volumeMounts: ").append(toIndentedString(volumeMounts)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addRevisionLabel");
    openapiFields.add("annotations");
    openapiFields.add("args");
    openapiFields.add("cmd");
    openapiFields.add("cpu");
    openapiFields.add("env");
    openapiFields.add("exposeType");
    openapiFields.add("hostAliases");
    openapiFields.add("image");
    openapiFields.add("imagePullPolicy");
    openapiFields.add("imagePullSecrets");
    openapiFields.add("labels");
    openapiFields.add("livenessProbe");
    openapiFields.add("memory");
    openapiFields.add("port");
    openapiFields.add("ports");
    openapiFields.add("readinessProbe");
    openapiFields.add("volumeMounts");
    openapiFields.add("volumes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addRevisionLabel");
    openapiRequiredFields.add("exposeType");
    openapiRequiredFields.add("image");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebserviceSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebserviceSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebserviceSpec is not found in the empty JSON string", WebserviceSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebserviceSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebserviceSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebserviceSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("args") != null && !jsonObj.get("args").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `args` to be an array in the JSON string but got `%s`", jsonObj.get("args").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cmd") != null && !jsonObj.get("cmd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cmd` to be an array in the JSON string but got `%s`", jsonObj.get("cmd").toString()));
      }
      if ((jsonObj.get("cpu") != null && !jsonObj.get("cpu").isJsonNull()) && !jsonObj.get("cpu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpu").toString()));
      }
      if (jsonObj.get("env") != null && !jsonObj.get("env").isJsonNull()) {
        JsonArray jsonArrayenv = jsonObj.getAsJsonArray("env");
        if (jsonArrayenv != null) {
          // ensure the json data is an array
          if (!jsonObj.get("env").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `env` to be an array in the JSON string but got `%s`", jsonObj.get("env").toString()));
          }

          // validate the optional field `env` (array)
          for (int i = 0; i < jsonArrayenv.size(); i++) {
            Env.validateJsonObject(jsonArrayenv.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("exposeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exposeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exposeType").toString()));
      }
      if (jsonObj.get("hostAliases") != null && !jsonObj.get("hostAliases").isJsonNull()) {
        JsonArray jsonArrayhostAliases = jsonObj.getAsJsonArray("hostAliases");
        if (jsonArrayhostAliases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hostAliases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hostAliases` to be an array in the JSON string but got `%s`", jsonObj.get("hostAliases").toString()));
          }

          // validate the optional field `hostAliases` (array)
          for (int i = 0; i < jsonArrayhostAliases.size(); i++) {
            HostAliases.validateJsonObject(jsonArrayhostAliases.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("imagePullPolicy") != null && !jsonObj.get("imagePullPolicy").isJsonNull()) && !jsonObj.get("imagePullPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imagePullPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imagePullPolicy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("imagePullSecrets") != null && !jsonObj.get("imagePullSecrets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `imagePullSecrets` to be an array in the JSON string but got `%s`", jsonObj.get("imagePullSecrets").toString()));
      }
      // validate the optional field `livenessProbe`
      if (jsonObj.get("livenessProbe") != null && !jsonObj.get("livenessProbe").isJsonNull()) {
        HealthProbe.validateJsonObject(jsonObj.getAsJsonObject("livenessProbe"));
      }
      if ((jsonObj.get("memory") != null && !jsonObj.get("memory").isJsonNull()) && !jsonObj.get("memory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memory").toString()));
      }
      if (jsonObj.get("ports") != null && !jsonObj.get("ports").isJsonNull()) {
        JsonArray jsonArrayports = jsonObj.getAsJsonArray("ports");
        if (jsonArrayports != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ports").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ports` to be an array in the JSON string but got `%s`", jsonObj.get("ports").toString()));
          }

          // validate the optional field `ports` (array)
          for (int i = 0; i < jsonArrayports.size(); i++) {
            Ports.validateJsonObject(jsonArrayports.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `readinessProbe`
      if (jsonObj.get("readinessProbe") != null && !jsonObj.get("readinessProbe").isJsonNull()) {
        HealthProbe.validateJsonObject(jsonObj.getAsJsonObject("readinessProbe"));
      }
      // validate the optional field `volumeMounts`
      if (jsonObj.get("volumeMounts") != null && !jsonObj.get("volumeMounts").isJsonNull()) {
        VolumeMounts.validateJsonObject(jsonObj.getAsJsonObject("volumeMounts"));
      }
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        JsonArray jsonArrayvolumes = jsonObj.getAsJsonArray("volumes");
        if (jsonArrayvolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumes` to be an array in the JSON string but got `%s`", jsonObj.get("volumes").toString()));
          }

          // validate the optional field `volumes` (array)
          for (int i = 0; i < jsonArrayvolumes.size(); i++) {
            Volumes.validateJsonObject(jsonArrayvolumes.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebserviceSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebserviceSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebserviceSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebserviceSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<WebserviceSpec>() {
           @Override
           public void write(JsonWriter out, WebserviceSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebserviceSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebserviceSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebserviceSpec
  * @throws IOException if the JSON string is invalid with respect to WebserviceSpec
  */
  public static WebserviceSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebserviceSpec.class);
  }

 /**
  * Convert an instance of WebserviceSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


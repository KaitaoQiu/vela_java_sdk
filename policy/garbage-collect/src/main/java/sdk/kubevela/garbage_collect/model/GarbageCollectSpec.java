/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.garbage_collect.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import sdk.kubevela.garbage_collect.model.GarbageCollectPolicyRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.garbage_collect.JSON;

/**
 * GarbageCollectSpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:49:53.394420Z[Etc/UTC]")
public class GarbageCollectSpec {
  public static final String SERIALIZED_NAME_APPLICATION_REVISION_LIMIT = "applicationRevisionLimit";
  @SerializedName(SERIALIZED_NAME_APPLICATION_REVISION_LIMIT)
  private Integer applicationRevisionLimit;

  public static final String SERIALIZED_NAME_CONTINUE_ON_FAILURE = "continueOnFailure";
  @SerializedName(SERIALIZED_NAME_CONTINUE_ON_FAILURE)
  private Boolean continueOnFailure = false;

  public static final String SERIALIZED_NAME_KEEP_LEGACY_RESOURCE = "keepLegacyResource";
  @SerializedName(SERIALIZED_NAME_KEEP_LEGACY_RESOURCE)
  private Boolean keepLegacyResource = false;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private List<GarbageCollectPolicyRule> rules = null;

  public GarbageCollectSpec() {
  }

  public GarbageCollectSpec applicationRevisionLimit(Integer applicationRevisionLimit) {
    
    this.applicationRevisionLimit = applicationRevisionLimit;
    return this;
  }

   /**
   * If set, it will override the default revision limit number and customize this number for the current application
   * @return applicationRevisionLimit
  **/
  @javax.annotation.Nullable

  public Integer getApplicationRevisionLimit() {
    return applicationRevisionLimit;
  }


  public void setApplicationRevisionLimit(Integer applicationRevisionLimit) {
    this.applicationRevisionLimit = applicationRevisionLimit;
  }


  public GarbageCollectSpec continueOnFailure(Boolean continueOnFailure) {
    
    this.continueOnFailure = continueOnFailure;
    return this;
  }

   /**
   * If is set, continue to execute gc when the workflow fails, by default gc will be executed only after the workflow succeeds
   * @return continueOnFailure
  **/
  @javax.annotation.Nonnull

  public Boolean getContinueOnFailure() {
    return continueOnFailure;
  }


  public void setContinueOnFailure(Boolean continueOnFailure) {
    this.continueOnFailure = continueOnFailure;
  }


  public GarbageCollectSpec keepLegacyResource(Boolean keepLegacyResource) {
    
    this.keepLegacyResource = keepLegacyResource;
    return this;
  }

   /**
   * If is set, outdated versioned resourcetracker will not be recycled automatically, outdated resources will be kept until resourcetracker be deleted manually
   * @return keepLegacyResource
  **/
  @javax.annotation.Nonnull

  public Boolean getKeepLegacyResource() {
    return keepLegacyResource;
  }


  public void setKeepLegacyResource(Boolean keepLegacyResource) {
    this.keepLegacyResource = keepLegacyResource;
  }


  public GarbageCollectSpec rules(List<GarbageCollectPolicyRule> rules) {
    
    this.rules = rules;
    return this;
  }

  public GarbageCollectSpec addRulesItem(GarbageCollectPolicyRule rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * Specify the list of rules to control gc strategy at resource level, if one resource is controlled by multiple rules, first rule will be used
   * @return rules
  **/
  @javax.annotation.Nullable

  public List<GarbageCollectPolicyRule> getRules() {
    return rules;
  }


  public void setRules(List<GarbageCollectPolicyRule> rules) {
    this.rules = rules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GarbageCollectSpec garbageCollectSpec = (GarbageCollectSpec) o;
    return Objects.equals(this.applicationRevisionLimit, garbageCollectSpec.applicationRevisionLimit) &&
        Objects.equals(this.continueOnFailure, garbageCollectSpec.continueOnFailure) &&
        Objects.equals(this.keepLegacyResource, garbageCollectSpec.keepLegacyResource) &&
        Objects.equals(this.rules, garbageCollectSpec.rules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationRevisionLimit, continueOnFailure, keepLegacyResource, rules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GarbageCollectSpec {\n");
    sb.append("    applicationRevisionLimit: ").append(toIndentedString(applicationRevisionLimit)).append("\n");
    sb.append("    continueOnFailure: ").append(toIndentedString(continueOnFailure)).append("\n");
    sb.append("    keepLegacyResource: ").append(toIndentedString(keepLegacyResource)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationRevisionLimit");
    openapiFields.add("continueOnFailure");
    openapiFields.add("keepLegacyResource");
    openapiFields.add("rules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("continueOnFailure");
    openapiRequiredFields.add("keepLegacyResource");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GarbageCollectSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GarbageCollectSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GarbageCollectSpec is not found in the empty JSON string", GarbageCollectSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GarbageCollectSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GarbageCollectSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GarbageCollectSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
        if (jsonArrayrules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
          }

          // validate the optional field `rules` (array)
          for (int i = 0; i < jsonArrayrules.size(); i++) {
            GarbageCollectPolicyRule.validateJsonObject(jsonArrayrules.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GarbageCollectSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GarbageCollectSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GarbageCollectSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GarbageCollectSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<GarbageCollectSpec>() {
           @Override
           public void write(JsonWriter out, GarbageCollectSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GarbageCollectSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GarbageCollectSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GarbageCollectSpec
  * @throws IOException if the JSON string is invalid with respect to GarbageCollectSpec
  */
  public static GarbageCollectSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GarbageCollectSpec.class);
  }

 /**
  * Convert an instance of GarbageCollectSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.override.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import sdk.kubevela.override.model.Traits;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.override.JSON;

/**
 * PatchParams
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:50:26.566562Z[Etc/UTC]")
public class PatchParams {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Object properties;

  public static final String SERIALIZED_NAME_TRAITS = "traits";
  @SerializedName(SERIALIZED_NAME_TRAITS)
  private List<Traits> traits = null;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public PatchParams() {
  }

  public PatchParams name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Specify the name of the patch component, if empty, all components will be merged
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public PatchParams properties(Object properties) {
    
    this.properties = properties;
    return this;
  }

   /**
   * Specify the properties to override.
   * @return properties
  **/
  @javax.annotation.Nullable

  public Object getProperties() {
    return properties;
  }


  public void setProperties(Object properties) {
    this.properties = properties;
  }


  public PatchParams traits(List<Traits> traits) {
    
    this.traits = traits;
    return this;
  }

  public PatchParams addTraitsItem(Traits traitsItem) {
    if (this.traits == null) {
      this.traits = new ArrayList<>();
    }
    this.traits.add(traitsItem);
    return this;
  }

   /**
   * Specify the traits to override.
   * @return traits
  **/
  @javax.annotation.Nullable

  public List<Traits> getTraits() {
    return traits;
  }


  public void setTraits(List<Traits> traits) {
    this.traits = traits;
  }


  public PatchParams type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Specify the type of the patch component.
   * @return type
  **/
  @javax.annotation.Nullable

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchParams patchParams = (PatchParams) o;
    return Objects.equals(this.name, patchParams.name) &&
        Objects.equals(this.properties, patchParams.properties) &&
        Objects.equals(this.traits, patchParams.traits) &&
        Objects.equals(this.type, patchParams.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, properties, traits, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchParams {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    traits: ").append(toIndentedString(traits)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("properties");
    openapiFields.add("traits");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PatchParams
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PatchParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchParams is not found in the empty JSON string", PatchParams.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PatchParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchParams` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("traits") != null && !jsonObj.get("traits").isJsonNull()) {
        JsonArray jsonArraytraits = jsonObj.getAsJsonArray("traits");
        if (jsonArraytraits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("traits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `traits` to be an array in the JSON string but got `%s`", jsonObj.get("traits").toString()));
          }

          // validate the optional field `traits` (array)
          for (int i = 0; i < jsonArraytraits.size(); i++) {
            Traits.validateJsonObject(jsonArraytraits.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchParams.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchParams>() {
           @Override
           public void write(JsonWriter out, PatchParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchParams read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PatchParams given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PatchParams
  * @throws IOException if the JSON string is invalid with respect to PatchParams
  */
  public static PatchParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchParams.class);
  }

 /**
  * Convert an instance of PatchParams to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


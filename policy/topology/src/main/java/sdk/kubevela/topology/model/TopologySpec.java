/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.topology.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.topology.JSON;

/**
 * TopologySpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:51:08.174993Z[Etc/UTC]")
public class TopologySpec {
  public static final String SERIALIZED_NAME_ALLOW_EMPTY = "allowEmpty";
  @SerializedName(SERIALIZED_NAME_ALLOW_EMPTY)
  private Boolean allowEmpty;

  public static final String SERIALIZED_NAME_CLUSTER_LABEL_SELECTOR = "clusterLabelSelector";
  @SerializedName(SERIALIZED_NAME_CLUSTER_LABEL_SELECTOR)
  private Map<String, String> clusterLabelSelector = null;

  public static final String SERIALIZED_NAME_CLUSTER_SELECTOR = "clusterSelector";
  @SerializedName(SERIALIZED_NAME_CLUSTER_SELECTOR)
  private Map<String, String> clusterSelector = null;

  public static final String SERIALIZED_NAME_CLUSTERS = "clusters";
  @SerializedName(SERIALIZED_NAME_CLUSTERS)
  private List<String> clusters = null;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public TopologySpec() {
  }

  public TopologySpec allowEmpty(Boolean allowEmpty) {
    
    this.allowEmpty = allowEmpty;
    return this;
  }

   /**
   * Ignore empty cluster error
   * @return allowEmpty
  **/
  @javax.annotation.Nullable

  public Boolean getAllowEmpty() {
    return allowEmpty;
  }


  public void setAllowEmpty(Boolean allowEmpty) {
    this.allowEmpty = allowEmpty;
  }


  public TopologySpec clusterLabelSelector(Map<String, String> clusterLabelSelector) {
    
    this.clusterLabelSelector = clusterLabelSelector;
    return this;
  }

  public TopologySpec putClusterLabelSelectorItem(String key, String clusterLabelSelectorItem) {
    if (this.clusterLabelSelector == null) {
      this.clusterLabelSelector = new HashMap<>();
    }
    this.clusterLabelSelector.put(key, clusterLabelSelectorItem);
    return this;
  }

   /**
   * Specify the label selector for clusters
   * @return clusterLabelSelector
  **/
  @javax.annotation.Nullable

  public Map<String, String> getClusterLabelSelector() {
    return clusterLabelSelector;
  }


  public void setClusterLabelSelector(Map<String, String> clusterLabelSelector) {
    this.clusterLabelSelector = clusterLabelSelector;
  }


  public TopologySpec clusterSelector(Map<String, String> clusterSelector) {
    
    this.clusterSelector = clusterSelector;
    return this;
  }

  public TopologySpec putClusterSelectorItem(String key, String clusterSelectorItem) {
    if (this.clusterSelector == null) {
      this.clusterSelector = new HashMap<>();
    }
    this.clusterSelector.put(key, clusterSelectorItem);
    return this;
  }

   /**
   * Deprecated: Use clusterLabelSelector instead.
   * @return clusterSelector
  **/
  @javax.annotation.Nullable

  public Map<String, String> getClusterSelector() {
    return clusterSelector;
  }


  public void setClusterSelector(Map<String, String> clusterSelector) {
    this.clusterSelector = clusterSelector;
  }


  public TopologySpec clusters(List<String> clusters) {
    
    this.clusters = clusters;
    return this;
  }

  public TopologySpec addClustersItem(String clustersItem) {
    if (this.clusters == null) {
      this.clusters = new ArrayList<>();
    }
    this.clusters.add(clustersItem);
    return this;
  }

   /**
   * Specify the names of the clusters to select.
   * @return clusters
  **/
  @javax.annotation.Nullable

  public List<String> getClusters() {
    return clusters;
  }


  public void setClusters(List<String> clusters) {
    this.clusters = clusters;
  }


  public TopologySpec namespace(String namespace) {
    
    this.namespace = namespace;
    return this;
  }

   /**
   * Specify the target namespace to deploy in the selected clusters, default inherit the original namespace.
   * @return namespace
  **/
  @javax.annotation.Nullable

  public String getNamespace() {
    return namespace;
  }


  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopologySpec topologySpec = (TopologySpec) o;
    return Objects.equals(this.allowEmpty, topologySpec.allowEmpty) &&
        Objects.equals(this.clusterLabelSelector, topologySpec.clusterLabelSelector) &&
        Objects.equals(this.clusterSelector, topologySpec.clusterSelector) &&
        Objects.equals(this.clusters, topologySpec.clusters) &&
        Objects.equals(this.namespace, topologySpec.namespace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowEmpty, clusterLabelSelector, clusterSelector, clusters, namespace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopologySpec {\n");
    sb.append("    allowEmpty: ").append(toIndentedString(allowEmpty)).append("\n");
    sb.append("    clusterLabelSelector: ").append(toIndentedString(clusterLabelSelector)).append("\n");
    sb.append("    clusterSelector: ").append(toIndentedString(clusterSelector)).append("\n");
    sb.append("    clusters: ").append(toIndentedString(clusters)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowEmpty");
    openapiFields.add("clusterLabelSelector");
    openapiFields.add("clusterSelector");
    openapiFields.add("clusters");
    openapiFields.add("namespace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TopologySpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TopologySpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TopologySpec is not found in the empty JSON string", TopologySpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TopologySpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TopologySpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("clusters") != null && !jsonObj.get("clusters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusters` to be an array in the JSON string but got `%s`", jsonObj.get("clusters").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TopologySpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TopologySpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TopologySpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TopologySpec.class));

       return (TypeAdapter<T>) new TypeAdapter<TopologySpec>() {
           @Override
           public void write(JsonWriter out, TopologySpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TopologySpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TopologySpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TopologySpec
  * @throws IOException if the JSON string is invalid with respect to TopologySpec
  */
  public static TopologySpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TopologySpec.class);
  }

 /**
  * Convert an instance of TopologySpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


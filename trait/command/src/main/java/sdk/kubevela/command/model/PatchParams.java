/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.command.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.command.JSON;

/**
 * PatchParams
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:49:22.356808Z[Etc/UTC]")
public class PatchParams {
  public static final String SERIALIZED_NAME_ADD_ARGS = "addArgs";
  @SerializedName(SERIALIZED_NAME_ADD_ARGS)
  private List<String> addArgs = null;

  public static final String SERIALIZED_NAME_ARGS = "args";
  @SerializedName(SERIALIZED_NAME_ARGS)
  private List<String> args = null;

  public static final String SERIALIZED_NAME_COMMAND = "command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private List<String> command = null;

  public static final String SERIALIZED_NAME_CONTAINER_NAME = "containerName";
  @SerializedName(SERIALIZED_NAME_CONTAINER_NAME)
  private String containerName = "";

  public static final String SERIALIZED_NAME_DEL_ARGS = "delArgs";
  @SerializedName(SERIALIZED_NAME_DEL_ARGS)
  private List<String> delArgs = null;

  public PatchParams() {
  }

  public PatchParams addArgs(List<String> addArgs) {
    
    this.addArgs = addArgs;
    return this;
  }

  public PatchParams addAddArgsItem(String addArgsItem) {
    this.addArgs.add(addArgsItem);
    return this;
  }

   /**
   * Specify the args to add in the target container, existing args will be kept, cannot be used with &#x60;args&#x60;
   * @return addArgs
  **/
  @javax.annotation.Nullable

  public List<String> getAddArgs() {
    return addArgs;
  }


  public void setAddArgs(List<String> addArgs) {
    this.addArgs = addArgs;
  }


  public PatchParams args(List<String> args) {
    
    this.args = args;
    return this;
  }

  public PatchParams addArgsItem(String argsItem) {
    this.args.add(argsItem);
    return this;
  }

   /**
   * Specify the args to use in the target container, if set, it will override existing args
   * @return args
  **/
  @javax.annotation.Nullable

  public List<String> getArgs() {
    return args;
  }


  public void setArgs(List<String> args) {
    this.args = args;
  }


  public PatchParams command(List<String> command) {
    
    this.command = command;
    return this;
  }

  public PatchParams addCommandItem(String commandItem) {
    this.command.add(commandItem);
    return this;
  }

   /**
   * Specify the command to use in the target container, if not set, it will not be changed
   * @return command
  **/
  @javax.annotation.Nullable

  public List<String> getCommand() {
    return command;
  }


  public void setCommand(List<String> command) {
    this.command = command;
  }


  public PatchParams containerName(String containerName) {
    
    this.containerName = containerName;
    return this;
  }

   /**
   * Specify the name of the target container, if not set, use the component name
   * @return containerName
  **/
  @javax.annotation.Nonnull

  public String getContainerName() {
    return containerName;
  }


  public void setContainerName(String containerName) {
    this.containerName = containerName;
  }


  public PatchParams delArgs(List<String> delArgs) {
    
    this.delArgs = delArgs;
    return this;
  }

  public PatchParams addDelArgsItem(String delArgsItem) {
    this.delArgs.add(delArgsItem);
    return this;
  }

   /**
   * Specify the existing args to delete in the target container, cannot be used with &#x60;args&#x60;
   * @return delArgs
  **/
  @javax.annotation.Nullable

  public List<String> getDelArgs() {
    return delArgs;
  }


  public void setDelArgs(List<String> delArgs) {
    this.delArgs = delArgs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchParams patchParams = (PatchParams) o;
    return Objects.equals(this.addArgs, patchParams.addArgs) &&
        Objects.equals(this.args, patchParams.args) &&
        Objects.equals(this.command, patchParams.command) &&
        Objects.equals(this.containerName, patchParams.containerName) &&
        Objects.equals(this.delArgs, patchParams.delArgs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addArgs, args, command, containerName, delArgs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchParams {\n");
    sb.append("    addArgs: ").append(toIndentedString(addArgs)).append("\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    containerName: ").append(toIndentedString(containerName)).append("\n");
    sb.append("    delArgs: ").append(toIndentedString(delArgs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addArgs");
    openapiFields.add("args");
    openapiFields.add("command");
    openapiFields.add("containerName");
    openapiFields.add("delArgs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addArgs");
    openapiRequiredFields.add("args");
    openapiRequiredFields.add("command");
    openapiRequiredFields.add("containerName");
    openapiRequiredFields.add("delArgs");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PatchParams
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PatchParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchParams is not found in the empty JSON string", PatchParams.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PatchParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchParams` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PatchParams.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("addArgs") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("addArgs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addArgs` to be an array in the JSON string but got `%s`", jsonObj.get("addArgs").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("args") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("args").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `args` to be an array in the JSON string but got `%s`", jsonObj.get("args").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("command") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("command").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `command` to be an array in the JSON string but got `%s`", jsonObj.get("command").toString()));
      }
      if (!jsonObj.get("containerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerName").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("delArgs") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("delArgs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `delArgs` to be an array in the JSON string but got `%s`", jsonObj.get("delArgs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchParams.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchParams>() {
           @Override
           public void write(JsonWriter out, PatchParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchParams read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PatchParams given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PatchParams
  * @throws IOException if the JSON string is invalid with respect to PatchParams
  */
  public static PatchParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchParams.class);
  }

 /**
  * Convert an instance of PatchParams to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.gateway.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.gateway.JSON;

/**
 * GatewaySpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:49:55.215288Z[Etc/UTC]")
public class GatewaySpec {
  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  private String propertyClass = "nginx";

  public static final String SERIALIZED_NAME_CLASS_IN_SPEC = "classInSpec";
  @SerializedName(SERIALIZED_NAME_CLASS_IN_SPEC)
  private Boolean classInSpec = false;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_GATEWAY_HOST = "gatewayHost";
  @SerializedName(SERIALIZED_NAME_GATEWAY_HOST)
  private String gatewayHost;

  public static final String SERIALIZED_NAME_HTTP = "http";
  @SerializedName(SERIALIZED_NAME_HTTP)
  private Map<String, Integer> http = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Specify a pathType for the ingress rules, defaults to \&quot;ImplementationSpecific\&quot;
   */
  @JsonAdapter(PathTypeEnum.Adapter.class)
  public enum PathTypeEnum {
    IMPLEMENTATIONSPECIFIC("ImplementationSpecific"),
    
    PREFIX("Prefix"),
    
    EXACT("Exact");

    private String value;

    PathTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PathTypeEnum fromValue(String value) {
      for (PathTypeEnum b : PathTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PathTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PathTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PathTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PathTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PATH_TYPE = "pathType";
  @SerializedName(SERIALIZED_NAME_PATH_TYPE)
  private PathTypeEnum pathType = PathTypeEnum.IMPLEMENTATIONSPECIFIC;

  public static final String SERIALIZED_NAME_SECRET_NAME = "secretName";
  @SerializedName(SERIALIZED_NAME_SECRET_NAME)
  private String secretName;

  public GatewaySpec() {
  }

  public GatewaySpec propertyClass(String propertyClass) {
    
    this.propertyClass = propertyClass;
    return this;
  }

   /**
   * Specify the class of ingress to use
   * @return propertyClass
  **/
  @javax.annotation.Nonnull

  public String getPropertyClass() {
    return propertyClass;
  }


  public void setPropertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
  }


  public GatewaySpec classInSpec(Boolean classInSpec) {
    
    this.classInSpec = classInSpec;
    return this;
  }

   /**
   * Set ingress class in &#39;.spec.ingressClassName&#39; instead of &#39;kubernetes.io/ingress.class&#39; annotation.
   * @return classInSpec
  **/
  @javax.annotation.Nonnull

  public Boolean getClassInSpec() {
    return classInSpec;
  }


  public void setClassInSpec(Boolean classInSpec) {
    this.classInSpec = classInSpec;
  }


  public GatewaySpec domain(String domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * Specify the domain you want to expose
   * @return domain
  **/
  @javax.annotation.Nullable

  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    this.domain = domain;
  }


  public GatewaySpec gatewayHost(String gatewayHost) {
    
    this.gatewayHost = gatewayHost;
    return this;
  }

   /**
   * Specify the host of the ingress gateway, which is used to generate the endpoints when the host is empty.
   * @return gatewayHost
  **/
  @javax.annotation.Nullable

  public String getGatewayHost() {
    return gatewayHost;
  }


  public void setGatewayHost(String gatewayHost) {
    this.gatewayHost = gatewayHost;
  }


  public GatewaySpec http(Map<String, Integer> http) {
    
    this.http = http;
    return this;
  }

  public GatewaySpec putHttpItem(String key, Integer httpItem) {
    this.http.put(key, httpItem);
    return this;
  }

   /**
   * Specify the mapping relationship between the http path and the workload port
   * @return http
  **/
  @javax.annotation.Nonnull

  public Map<String, Integer> getHttp() {
    return http;
  }


  public void setHttp(Map<String, Integer> http) {
    this.http = http;
  }


  public GatewaySpec name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Specify a unique name for this gateway, required to support multiple gateway traits on a component
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public GatewaySpec pathType(PathTypeEnum pathType) {
    
    this.pathType = pathType;
    return this;
  }

   /**
   * Specify a pathType for the ingress rules, defaults to \&quot;ImplementationSpecific\&quot;
   * @return pathType
  **/
  @javax.annotation.Nonnull

  public PathTypeEnum getPathType() {
    return pathType;
  }


  public void setPathType(PathTypeEnum pathType) {
    this.pathType = pathType;
  }


  public GatewaySpec secretName(String secretName) {
    
    this.secretName = secretName;
    return this;
  }

   /**
   * Specify the secret name you want to quote to use tls.
   * @return secretName
  **/
  @javax.annotation.Nullable

  public String getSecretName() {
    return secretName;
  }


  public void setSecretName(String secretName) {
    this.secretName = secretName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewaySpec gatewaySpec = (GatewaySpec) o;
    return Objects.equals(this.propertyClass, gatewaySpec.propertyClass) &&
        Objects.equals(this.classInSpec, gatewaySpec.classInSpec) &&
        Objects.equals(this.domain, gatewaySpec.domain) &&
        Objects.equals(this.gatewayHost, gatewaySpec.gatewayHost) &&
        Objects.equals(this.http, gatewaySpec.http) &&
        Objects.equals(this.name, gatewaySpec.name) &&
        Objects.equals(this.pathType, gatewaySpec.pathType) &&
        Objects.equals(this.secretName, gatewaySpec.secretName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyClass, classInSpec, domain, gatewayHost, http, name, pathType, secretName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewaySpec {\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    classInSpec: ").append(toIndentedString(classInSpec)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    gatewayHost: ").append(toIndentedString(gatewayHost)).append("\n");
    sb.append("    http: ").append(toIndentedString(http)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pathType: ").append(toIndentedString(pathType)).append("\n");
    sb.append("    secretName: ").append(toIndentedString(secretName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("class");
    openapiFields.add("classInSpec");
    openapiFields.add("domain");
    openapiFields.add("gatewayHost");
    openapiFields.add("http");
    openapiFields.add("name");
    openapiFields.add("pathType");
    openapiFields.add("secretName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("class");
    openapiRequiredFields.add("classInSpec");
    openapiRequiredFields.add("http");
    openapiRequiredFields.add("pathType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GatewaySpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GatewaySpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewaySpec is not found in the empty JSON string", GatewaySpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GatewaySpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewaySpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GatewaySpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("class").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("gatewayHost") != null && !jsonObj.get("gatewayHost").isJsonNull()) && !jsonObj.get("gatewayHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayHost").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("pathType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pathType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pathType").toString()));
      }
      if ((jsonObj.get("secretName") != null && !jsonObj.get("secretName").isJsonNull()) && !jsonObj.get("secretName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewaySpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewaySpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewaySpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewaySpec.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewaySpec>() {
           @Override
           public void write(JsonWriter out, GatewaySpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewaySpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GatewaySpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GatewaySpec
  * @throws IOException if the JSON string is invalid with respect to GatewaySpec
  */
  public static GatewaySpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewaySpec.class);
  }

 /**
  * Convert an instance of GatewaySpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


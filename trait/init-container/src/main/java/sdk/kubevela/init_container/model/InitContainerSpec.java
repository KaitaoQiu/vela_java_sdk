/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.init_container.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import sdk.kubevela.init_container.model.Env;
import sdk.kubevela.init_container.model.ExtraVolumeMounts;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.init_container.JSON;

/**
 * InitContainerSpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:50:02.119751Z[Etc/UTC]")
public class InitContainerSpec {
  public static final String SERIALIZED_NAME_APP_MOUNT_PATH = "appMountPath";
  @SerializedName(SERIALIZED_NAME_APP_MOUNT_PATH)
  private String appMountPath;

  public static final String SERIALIZED_NAME_ARGS = "args";
  @SerializedName(SERIALIZED_NAME_ARGS)
  private List<String> args = null;

  public static final String SERIALIZED_NAME_CMD = "cmd";
  @SerializedName(SERIALIZED_NAME_CMD)
  private List<String> cmd = null;

  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private List<Env> env = null;

  public static final String SERIALIZED_NAME_EXTRA_VOLUME_MOUNTS = "extraVolumeMounts";
  @SerializedName(SERIALIZED_NAME_EXTRA_VOLUME_MOUNTS)
  private List<ExtraVolumeMounts> extraVolumeMounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  /**
   * Specify image pull policy for your service
   */
  @JsonAdapter(ImagePullPolicyEnum.Adapter.class)
  public enum ImagePullPolicyEnum {
    IFNOTPRESENT("IfNotPresent"),
    
    ALWAYS("Always"),
    
    NEVER("Never");

    private String value;

    ImagePullPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImagePullPolicyEnum fromValue(String value) {
      for (ImagePullPolicyEnum b : ImagePullPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImagePullPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImagePullPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImagePullPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImagePullPolicyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IMAGE_PULL_POLICY = "imagePullPolicy";
  @SerializedName(SERIALIZED_NAME_IMAGE_PULL_POLICY)
  private ImagePullPolicyEnum imagePullPolicy = ImagePullPolicyEnum.IFNOTPRESENT;

  public static final String SERIALIZED_NAME_INIT_MOUNT_PATH = "initMountPath";
  @SerializedName(SERIALIZED_NAME_INIT_MOUNT_PATH)
  private String initMountPath;

  public static final String SERIALIZED_NAME_MOUNT_NAME = "mountName";
  @SerializedName(SERIALIZED_NAME_MOUNT_NAME)
  private String mountName = "workdir";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public InitContainerSpec() {
  }

  public InitContainerSpec appMountPath(String appMountPath) {
    
    this.appMountPath = appMountPath;
    return this;
  }

   /**
   * Specify the mount path of app container
   * @return appMountPath
  **/
  @javax.annotation.Nonnull

  public String getAppMountPath() {
    return appMountPath;
  }


  public void setAppMountPath(String appMountPath) {
    this.appMountPath = appMountPath;
  }


  public InitContainerSpec args(List<String> args) {
    
    this.args = args;
    return this;
  }

  public InitContainerSpec addArgsItem(String argsItem) {
    if (this.args == null) {
      this.args = new ArrayList<>();
    }
    this.args.add(argsItem);
    return this;
  }

   /**
   * Specify the args run in the init container
   * @return args
  **/
  @javax.annotation.Nullable

  public List<String> getArgs() {
    return args;
  }


  public void setArgs(List<String> args) {
    this.args = args;
  }


  public InitContainerSpec cmd(List<String> cmd) {
    
    this.cmd = cmd;
    return this;
  }

  public InitContainerSpec addCmdItem(String cmdItem) {
    if (this.cmd == null) {
      this.cmd = new ArrayList<>();
    }
    this.cmd.add(cmdItem);
    return this;
  }

   /**
   * Specify the commands run in the init container
   * @return cmd
  **/
  @javax.annotation.Nullable

  public List<String> getCmd() {
    return cmd;
  }


  public void setCmd(List<String> cmd) {
    this.cmd = cmd;
  }


  public InitContainerSpec env(List<Env> env) {
    
    this.env = env;
    return this;
  }

  public InitContainerSpec addEnvItem(Env envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

   /**
   * Specify the env run in the init container
   * @return env
  **/
  @javax.annotation.Nullable

  public List<Env> getEnv() {
    return env;
  }


  public void setEnv(List<Env> env) {
    this.env = env;
  }


  public InitContainerSpec extraVolumeMounts(List<ExtraVolumeMounts> extraVolumeMounts) {
    
    this.extraVolumeMounts = extraVolumeMounts;
    return this;
  }

  public InitContainerSpec addExtraVolumeMountsItem(ExtraVolumeMounts extraVolumeMountsItem) {
    this.extraVolumeMounts.add(extraVolumeMountsItem);
    return this;
  }

   /**
   * Specify the extra volume mounts for the init container
   * @return extraVolumeMounts
  **/
  @javax.annotation.Nonnull

  public List<ExtraVolumeMounts> getExtraVolumeMounts() {
    return extraVolumeMounts;
  }


  public void setExtraVolumeMounts(List<ExtraVolumeMounts> extraVolumeMounts) {
    this.extraVolumeMounts = extraVolumeMounts;
  }


  public InitContainerSpec image(String image) {
    
    this.image = image;
    return this;
  }

   /**
   * Specify the image of init container
   * @return image
  **/
  @javax.annotation.Nonnull

  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    this.image = image;
  }


  public InitContainerSpec imagePullPolicy(ImagePullPolicyEnum imagePullPolicy) {
    
    this.imagePullPolicy = imagePullPolicy;
    return this;
  }

   /**
   * Specify image pull policy for your service
   * @return imagePullPolicy
  **/
  @javax.annotation.Nonnull

  public ImagePullPolicyEnum getImagePullPolicy() {
    return imagePullPolicy;
  }


  public void setImagePullPolicy(ImagePullPolicyEnum imagePullPolicy) {
    this.imagePullPolicy = imagePullPolicy;
  }


  public InitContainerSpec initMountPath(String initMountPath) {
    
    this.initMountPath = initMountPath;
    return this;
  }

   /**
   * Specify the mount path of init container
   * @return initMountPath
  **/
  @javax.annotation.Nonnull

  public String getInitMountPath() {
    return initMountPath;
  }


  public void setInitMountPath(String initMountPath) {
    this.initMountPath = initMountPath;
  }


  public InitContainerSpec mountName(String mountName) {
    
    this.mountName = mountName;
    return this;
  }

   /**
   * Specify the mount name of shared volume
   * @return mountName
  **/
  @javax.annotation.Nonnull

  public String getMountName() {
    return mountName;
  }


  public void setMountName(String mountName) {
    this.mountName = mountName;
  }


  public InitContainerSpec name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Specify the name of init container
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InitContainerSpec initContainerSpec = (InitContainerSpec) o;
    return Objects.equals(this.appMountPath, initContainerSpec.appMountPath) &&
        Objects.equals(this.args, initContainerSpec.args) &&
        Objects.equals(this.cmd, initContainerSpec.cmd) &&
        Objects.equals(this.env, initContainerSpec.env) &&
        Objects.equals(this.extraVolumeMounts, initContainerSpec.extraVolumeMounts) &&
        Objects.equals(this.image, initContainerSpec.image) &&
        Objects.equals(this.imagePullPolicy, initContainerSpec.imagePullPolicy) &&
        Objects.equals(this.initMountPath, initContainerSpec.initMountPath) &&
        Objects.equals(this.mountName, initContainerSpec.mountName) &&
        Objects.equals(this.name, initContainerSpec.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appMountPath, args, cmd, env, extraVolumeMounts, image, imagePullPolicy, initMountPath, mountName, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InitContainerSpec {\n");
    sb.append("    appMountPath: ").append(toIndentedString(appMountPath)).append("\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    cmd: ").append(toIndentedString(cmd)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    extraVolumeMounts: ").append(toIndentedString(extraVolumeMounts)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imagePullPolicy: ").append(toIndentedString(imagePullPolicy)).append("\n");
    sb.append("    initMountPath: ").append(toIndentedString(initMountPath)).append("\n");
    sb.append("    mountName: ").append(toIndentedString(mountName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appMountPath");
    openapiFields.add("args");
    openapiFields.add("cmd");
    openapiFields.add("env");
    openapiFields.add("extraVolumeMounts");
    openapiFields.add("image");
    openapiFields.add("imagePullPolicy");
    openapiFields.add("initMountPath");
    openapiFields.add("mountName");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("appMountPath");
    openapiRequiredFields.add("extraVolumeMounts");
    openapiRequiredFields.add("image");
    openapiRequiredFields.add("imagePullPolicy");
    openapiRequiredFields.add("initMountPath");
    openapiRequiredFields.add("mountName");
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InitContainerSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InitContainerSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InitContainerSpec is not found in the empty JSON string", InitContainerSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!InitContainerSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InitContainerSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InitContainerSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("appMountPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appMountPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appMountPath").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("args") != null && !jsonObj.get("args").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `args` to be an array in the JSON string but got `%s`", jsonObj.get("args").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cmd") != null && !jsonObj.get("cmd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cmd` to be an array in the JSON string but got `%s`", jsonObj.get("cmd").toString()));
      }
      if (jsonObj.get("env") != null && !jsonObj.get("env").isJsonNull()) {
        JsonArray jsonArrayenv = jsonObj.getAsJsonArray("env");
        if (jsonArrayenv != null) {
          // ensure the json data is an array
          if (!jsonObj.get("env").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `env` to be an array in the JSON string but got `%s`", jsonObj.get("env").toString()));
          }

          // validate the optional field `env` (array)
          for (int i = 0; i < jsonArrayenv.size(); i++) {
            Env.validateJsonObject(jsonArrayenv.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("extraVolumeMounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `extraVolumeMounts` to be an array in the JSON string but got `%s`", jsonObj.get("extraVolumeMounts").toString()));
      }

      JsonArray jsonArrayextraVolumeMounts = jsonObj.getAsJsonArray("extraVolumeMounts");
      // validate the required field `extraVolumeMounts` (array)
      for (int i = 0; i < jsonArrayextraVolumeMounts.size(); i++) {
        ExtraVolumeMounts.validateJsonObject(jsonArrayextraVolumeMounts.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if (!jsonObj.get("imagePullPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imagePullPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imagePullPolicy").toString()));
      }
      if (!jsonObj.get("initMountPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initMountPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initMountPath").toString()));
      }
      if (!jsonObj.get("mountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mountName").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InitContainerSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InitContainerSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InitContainerSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InitContainerSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<InitContainerSpec>() {
           @Override
           public void write(JsonWriter out, InitContainerSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InitContainerSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InitContainerSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InitContainerSpec
  * @throws IOException if the JSON string is invalid with respect to InitContainerSpec
  */
  public static InitContainerSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InitContainerSpec.class);
  }

 /**
  * Convert an instance of InitContainerSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


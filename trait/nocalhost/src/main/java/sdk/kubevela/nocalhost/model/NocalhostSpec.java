/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.nocalhost.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import sdk.kubevela.nocalhost.model.Command;
import sdk.kubevela.nocalhost.model.Debug;
import sdk.kubevela.nocalhost.model.Env;
import sdk.kubevela.nocalhost.model.Image;
import sdk.kubevela.nocalhost.model.PersistentVolumeDirs;
import sdk.kubevela.nocalhost.model.Resources;
import sdk.kubevela.nocalhost.model.Sync;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.nocalhost.JSON;

/**
 * NocalhostSpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:50:20.966331Z[Etc/UTC]")
public class NocalhostSpec {
  public static final String SERIALIZED_NAME_COMMAND = "command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private Command command;

  public static final String SERIALIZED_NAME_DEBUG = "debug";
  @SerializedName(SERIALIZED_NAME_DEBUG)
  private Debug debug;

  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private List<Env> env = null;

  public static final String SERIALIZED_NAME_GIT_URL = "gitUrl";
  @SerializedName(SERIALIZED_NAME_GIT_URL)
  private String gitUrl;

  public static final String SERIALIZED_NAME_HOT_RELOAD = "hotReload";
  @SerializedName(SERIALIZED_NAME_HOT_RELOAD)
  private Boolean hotReload = true;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private Image image;

  public static final String SERIALIZED_NAME_PERSISTENT_VOLUME_DIRS = "persistentVolumeDirs";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_VOLUME_DIRS)
  private List<PersistentVolumeDirs> persistentVolumeDirs = null;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PORT_FORWARD = "portForward";
  @SerializedName(SERIALIZED_NAME_PORT_FORWARD)
  private List<String> portForward = null;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private Resources resources;

  public static final String SERIALIZED_NAME_SERVICE_TYPE = "serviceType";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE)
  private String serviceType = "deployment";

  public static final String SERIALIZED_NAME_SHELL = "shell";
  @SerializedName(SERIALIZED_NAME_SHELL)
  private String shell = "bash";

  public static final String SERIALIZED_NAME_STORAGE_CLASS = "storageClass";
  @SerializedName(SERIALIZED_NAME_STORAGE_CLASS)
  private String storageClass;

  public static final String SERIALIZED_NAME_SYNC = "sync";
  @SerializedName(SERIALIZED_NAME_SYNC)
  private Sync sync;

  public static final String SERIALIZED_NAME_WORK_DIR = "workDir";
  @SerializedName(SERIALIZED_NAME_WORK_DIR)
  private String workDir = "/home/nocalhost-dev";

  public NocalhostSpec() {
  }

  public NocalhostSpec command(Command command) {
    
    this.command = command;
    return this;
  }

   /**
   * Get command
   * @return command
  **/
  @javax.annotation.Nonnull

  public Command getCommand() {
    return command;
  }


  public void setCommand(Command command) {
    this.command = command;
  }


  public NocalhostSpec debug(Debug debug) {
    
    this.debug = debug;
    return this;
  }

   /**
   * Get debug
   * @return debug
  **/
  @javax.annotation.Nullable

  public Debug getDebug() {
    return debug;
  }


  public void setDebug(Debug debug) {
    this.debug = debug;
  }


  public NocalhostSpec env(List<Env> env) {
    
    this.env = env;
    return this;
  }

  public NocalhostSpec addEnvItem(Env envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

   /**
   * Get env
   * @return env
  **/
  @javax.annotation.Nullable

  public List<Env> getEnv() {
    return env;
  }


  public void setEnv(List<Env> env) {
    this.env = env;
  }


  public NocalhostSpec gitUrl(String gitUrl) {
    
    this.gitUrl = gitUrl;
    return this;
  }

   /**
   * Get gitUrl
   * @return gitUrl
  **/
  @javax.annotation.Nullable

  public String getGitUrl() {
    return gitUrl;
  }


  public void setGitUrl(String gitUrl) {
    this.gitUrl = gitUrl;
  }


  public NocalhostSpec hotReload(Boolean hotReload) {
    
    this.hotReload = hotReload;
    return this;
  }

   /**
   * Get hotReload
   * @return hotReload
  **/
  @javax.annotation.Nonnull

  public Boolean getHotReload() {
    return hotReload;
  }


  public void setHotReload(Boolean hotReload) {
    this.hotReload = hotReload;
  }


  public NocalhostSpec image(Image image) {
    
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @javax.annotation.Nonnull

  public Image getImage() {
    return image;
  }


  public void setImage(Image image) {
    this.image = image;
  }


  public NocalhostSpec persistentVolumeDirs(List<PersistentVolumeDirs> persistentVolumeDirs) {
    
    this.persistentVolumeDirs = persistentVolumeDirs;
    return this;
  }

  public NocalhostSpec addPersistentVolumeDirsItem(PersistentVolumeDirs persistentVolumeDirsItem) {
    if (this.persistentVolumeDirs == null) {
      this.persistentVolumeDirs = new ArrayList<>();
    }
    this.persistentVolumeDirs.add(persistentVolumeDirsItem);
    return this;
  }

   /**
   * Get persistentVolumeDirs
   * @return persistentVolumeDirs
  **/
  @javax.annotation.Nullable

  public List<PersistentVolumeDirs> getPersistentVolumeDirs() {
    return persistentVolumeDirs;
  }


  public void setPersistentVolumeDirs(List<PersistentVolumeDirs> persistentVolumeDirs) {
    this.persistentVolumeDirs = persistentVolumeDirs;
  }


  public NocalhostSpec port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @javax.annotation.Nonnull

  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }


  public NocalhostSpec portForward(List<String> portForward) {
    
    this.portForward = portForward;
    return this;
  }

  public NocalhostSpec addPortForwardItem(String portForwardItem) {
    if (this.portForward == null) {
      this.portForward = new ArrayList<>();
    }
    this.portForward.add(portForwardItem);
    return this;
  }

   /**
   * Get portForward
   * @return portForward
  **/
  @javax.annotation.Nullable

  public List<String> getPortForward() {
    return portForward;
  }


  public void setPortForward(List<String> portForward) {
    this.portForward = portForward;
  }


  public NocalhostSpec resources(Resources resources) {
    
    this.resources = resources;
    return this;
  }

   /**
   * Get resources
   * @return resources
  **/
  @javax.annotation.Nonnull

  public Resources getResources() {
    return resources;
  }


  public void setResources(Resources resources) {
    this.resources = resources;
  }


  public NocalhostSpec serviceType(String serviceType) {
    
    this.serviceType = serviceType;
    return this;
  }

   /**
   * Get serviceType
   * @return serviceType
  **/
  @javax.annotation.Nonnull

  public String getServiceType() {
    return serviceType;
  }


  public void setServiceType(String serviceType) {
    this.serviceType = serviceType;
  }


  public NocalhostSpec shell(String shell) {
    
    this.shell = shell;
    return this;
  }

   /**
   * Get shell
   * @return shell
  **/
  @javax.annotation.Nonnull

  public String getShell() {
    return shell;
  }


  public void setShell(String shell) {
    this.shell = shell;
  }


  public NocalhostSpec storageClass(String storageClass) {
    
    this.storageClass = storageClass;
    return this;
  }

   /**
   * Get storageClass
   * @return storageClass
  **/
  @javax.annotation.Nullable

  public String getStorageClass() {
    return storageClass;
  }


  public void setStorageClass(String storageClass) {
    this.storageClass = storageClass;
  }


  public NocalhostSpec sync(Sync sync) {
    
    this.sync = sync;
    return this;
  }

   /**
   * Get sync
   * @return sync
  **/
  @javax.annotation.Nonnull

  public Sync getSync() {
    return sync;
  }


  public void setSync(Sync sync) {
    this.sync = sync;
  }


  public NocalhostSpec workDir(String workDir) {
    
    this.workDir = workDir;
    return this;
  }

   /**
   * Get workDir
   * @return workDir
  **/
  @javax.annotation.Nonnull

  public String getWorkDir() {
    return workDir;
  }


  public void setWorkDir(String workDir) {
    this.workDir = workDir;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NocalhostSpec nocalhostSpec = (NocalhostSpec) o;
    return Objects.equals(this.command, nocalhostSpec.command) &&
        Objects.equals(this.debug, nocalhostSpec.debug) &&
        Objects.equals(this.env, nocalhostSpec.env) &&
        Objects.equals(this.gitUrl, nocalhostSpec.gitUrl) &&
        Objects.equals(this.hotReload, nocalhostSpec.hotReload) &&
        Objects.equals(this.image, nocalhostSpec.image) &&
        Objects.equals(this.persistentVolumeDirs, nocalhostSpec.persistentVolumeDirs) &&
        Objects.equals(this.port, nocalhostSpec.port) &&
        Objects.equals(this.portForward, nocalhostSpec.portForward) &&
        Objects.equals(this.resources, nocalhostSpec.resources) &&
        Objects.equals(this.serviceType, nocalhostSpec.serviceType) &&
        Objects.equals(this.shell, nocalhostSpec.shell) &&
        Objects.equals(this.storageClass, nocalhostSpec.storageClass) &&
        Objects.equals(this.sync, nocalhostSpec.sync) &&
        Objects.equals(this.workDir, nocalhostSpec.workDir);
  }

  @Override
  public int hashCode() {
    return Objects.hash(command, debug, env, gitUrl, hotReload, image, persistentVolumeDirs, port, portForward, resources, serviceType, shell, storageClass, sync, workDir);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NocalhostSpec {\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    debug: ").append(toIndentedString(debug)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    gitUrl: ").append(toIndentedString(gitUrl)).append("\n");
    sb.append("    hotReload: ").append(toIndentedString(hotReload)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    persistentVolumeDirs: ").append(toIndentedString(persistentVolumeDirs)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    portForward: ").append(toIndentedString(portForward)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    shell: ").append(toIndentedString(shell)).append("\n");
    sb.append("    storageClass: ").append(toIndentedString(storageClass)).append("\n");
    sb.append("    sync: ").append(toIndentedString(sync)).append("\n");
    sb.append("    workDir: ").append(toIndentedString(workDir)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("command");
    openapiFields.add("debug");
    openapiFields.add("env");
    openapiFields.add("gitUrl");
    openapiFields.add("hotReload");
    openapiFields.add("image");
    openapiFields.add("persistentVolumeDirs");
    openapiFields.add("port");
    openapiFields.add("portForward");
    openapiFields.add("resources");
    openapiFields.add("serviceType");
    openapiFields.add("shell");
    openapiFields.add("storageClass");
    openapiFields.add("sync");
    openapiFields.add("workDir");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("command");
    openapiRequiredFields.add("hotReload");
    openapiRequiredFields.add("image");
    openapiRequiredFields.add("port");
    openapiRequiredFields.add("resources");
    openapiRequiredFields.add("serviceType");
    openapiRequiredFields.add("shell");
    openapiRequiredFields.add("sync");
    openapiRequiredFields.add("workDir");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NocalhostSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NocalhostSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NocalhostSpec is not found in the empty JSON string", NocalhostSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!NocalhostSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NocalhostSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NocalhostSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `command`
      Command.validateJsonObject(jsonObj.getAsJsonObject("command"));
      // validate the optional field `debug`
      if (jsonObj.get("debug") != null && !jsonObj.get("debug").isJsonNull()) {
        Debug.validateJsonObject(jsonObj.getAsJsonObject("debug"));
      }
      if (jsonObj.get("env") != null && !jsonObj.get("env").isJsonNull()) {
        JsonArray jsonArrayenv = jsonObj.getAsJsonArray("env");
        if (jsonArrayenv != null) {
          // ensure the json data is an array
          if (!jsonObj.get("env").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `env` to be an array in the JSON string but got `%s`", jsonObj.get("env").toString()));
          }

          // validate the optional field `env` (array)
          for (int i = 0; i < jsonArrayenv.size(); i++) {
            Env.validateJsonObject(jsonArrayenv.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("gitUrl") != null && !jsonObj.get("gitUrl").isJsonNull()) && !jsonObj.get("gitUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitUrl").toString()));
      }
      // validate the required field `image`
      Image.validateJsonObject(jsonObj.getAsJsonObject("image"));
      if (jsonObj.get("persistentVolumeDirs") != null && !jsonObj.get("persistentVolumeDirs").isJsonNull()) {
        JsonArray jsonArraypersistentVolumeDirs = jsonObj.getAsJsonArray("persistentVolumeDirs");
        if (jsonArraypersistentVolumeDirs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("persistentVolumeDirs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `persistentVolumeDirs` to be an array in the JSON string but got `%s`", jsonObj.get("persistentVolumeDirs").toString()));
          }

          // validate the optional field `persistentVolumeDirs` (array)
          for (int i = 0; i < jsonArraypersistentVolumeDirs.size(); i++) {
            PersistentVolumeDirs.validateJsonObject(jsonArraypersistentVolumeDirs.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("portForward") != null && !jsonObj.get("portForward").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `portForward` to be an array in the JSON string but got `%s`", jsonObj.get("portForward").toString()));
      }
      // validate the required field `resources`
      Resources.validateJsonObject(jsonObj.getAsJsonObject("resources"));
      if (!jsonObj.get("serviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceType").toString()));
      }
      if (!jsonObj.get("shell").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shell` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shell").toString()));
      }
      if ((jsonObj.get("storageClass") != null && !jsonObj.get("storageClass").isJsonNull()) && !jsonObj.get("storageClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageClass").toString()));
      }
      // validate the required field `sync`
      Sync.validateJsonObject(jsonObj.getAsJsonObject("sync"));
      if (!jsonObj.get("workDir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workDir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workDir").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NocalhostSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NocalhostSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NocalhostSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NocalhostSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<NocalhostSpec>() {
           @Override
           public void write(JsonWriter out, NocalhostSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NocalhostSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NocalhostSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NocalhostSpec
  * @throws IOException if the JSON string is invalid with respect to NocalhostSpec
  */
  public static NocalhostSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NocalhostSpec.class);
  }

 /**
  * Convert an instance of NocalhostSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


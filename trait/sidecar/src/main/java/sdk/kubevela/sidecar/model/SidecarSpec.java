/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.sidecar.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import sdk.kubevela.sidecar.model.Env;
import sdk.kubevela.sidecar.model.HealthProbe;
import sdk.kubevela.sidecar.model.Volumes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.sidecar.JSON;

/**
 * SidecarSpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:50:55.699410Z[Etc/UTC]")
public class SidecarSpec {
  public static final String SERIALIZED_NAME_ARGS = "args";
  @SerializedName(SERIALIZED_NAME_ARGS)
  private List<String> args = null;

  public static final String SERIALIZED_NAME_CMD = "cmd";
  @SerializedName(SERIALIZED_NAME_CMD)
  private List<String> cmd = null;

  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private List<Env> env = null;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_LIVENESS_PROBE = "livenessProbe";
  @SerializedName(SERIALIZED_NAME_LIVENESS_PROBE)
  private HealthProbe livenessProbe;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_READINESS_PROBE = "readinessProbe";
  @SerializedName(SERIALIZED_NAME_READINESS_PROBE)
  private HealthProbe readinessProbe;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<Volumes> volumes = null;

  public SidecarSpec() {
  }

  public SidecarSpec args(List<String> args) {
    
    this.args = args;
    return this;
  }

  public SidecarSpec addArgsItem(String argsItem) {
    if (this.args == null) {
      this.args = new ArrayList<>();
    }
    this.args.add(argsItem);
    return this;
  }

   /**
   * Specify the args in the sidecar
   * @return args
  **/
  @javax.annotation.Nullable

  public List<String> getArgs() {
    return args;
  }


  public void setArgs(List<String> args) {
    this.args = args;
  }


  public SidecarSpec cmd(List<String> cmd) {
    
    this.cmd = cmd;
    return this;
  }

  public SidecarSpec addCmdItem(String cmdItem) {
    if (this.cmd == null) {
      this.cmd = new ArrayList<>();
    }
    this.cmd.add(cmdItem);
    return this;
  }

   /**
   * Specify the commands run in the sidecar
   * @return cmd
  **/
  @javax.annotation.Nullable

  public List<String> getCmd() {
    return cmd;
  }


  public void setCmd(List<String> cmd) {
    this.cmd = cmd;
  }


  public SidecarSpec env(List<Env> env) {
    
    this.env = env;
    return this;
  }

  public SidecarSpec addEnvItem(Env envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

   /**
   * Specify the env in the sidecar
   * @return env
  **/
  @javax.annotation.Nullable

  public List<Env> getEnv() {
    return env;
  }


  public void setEnv(List<Env> env) {
    this.env = env;
  }


  public SidecarSpec image(String image) {
    
    this.image = image;
    return this;
  }

   /**
   * Specify the image of sidecar container
   * @return image
  **/
  @javax.annotation.Nonnull

  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    this.image = image;
  }


  public SidecarSpec livenessProbe(HealthProbe livenessProbe) {
    
    this.livenessProbe = livenessProbe;
    return this;
  }

   /**
   * Get livenessProbe
   * @return livenessProbe
  **/
  @javax.annotation.Nullable

  public HealthProbe getLivenessProbe() {
    return livenessProbe;
  }


  public void setLivenessProbe(HealthProbe livenessProbe) {
    this.livenessProbe = livenessProbe;
  }


  public SidecarSpec name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Specify the name of sidecar container
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public SidecarSpec readinessProbe(HealthProbe readinessProbe) {
    
    this.readinessProbe = readinessProbe;
    return this;
  }

   /**
   * Get readinessProbe
   * @return readinessProbe
  **/
  @javax.annotation.Nullable

  public HealthProbe getReadinessProbe() {
    return readinessProbe;
  }


  public void setReadinessProbe(HealthProbe readinessProbe) {
    this.readinessProbe = readinessProbe;
  }


  public SidecarSpec volumes(List<Volumes> volumes) {
    
    this.volumes = volumes;
    return this;
  }

  public SidecarSpec addVolumesItem(Volumes volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

   /**
   * Specify the shared volume path
   * @return volumes
  **/
  @javax.annotation.Nullable

  public List<Volumes> getVolumes() {
    return volumes;
  }


  public void setVolumes(List<Volumes> volumes) {
    this.volumes = volumes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SidecarSpec sidecarSpec = (SidecarSpec) o;
    return Objects.equals(this.args, sidecarSpec.args) &&
        Objects.equals(this.cmd, sidecarSpec.cmd) &&
        Objects.equals(this.env, sidecarSpec.env) &&
        Objects.equals(this.image, sidecarSpec.image) &&
        Objects.equals(this.livenessProbe, sidecarSpec.livenessProbe) &&
        Objects.equals(this.name, sidecarSpec.name) &&
        Objects.equals(this.readinessProbe, sidecarSpec.readinessProbe) &&
        Objects.equals(this.volumes, sidecarSpec.volumes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(args, cmd, env, image, livenessProbe, name, readinessProbe, volumes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SidecarSpec {\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    cmd: ").append(toIndentedString(cmd)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    livenessProbe: ").append(toIndentedString(livenessProbe)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    readinessProbe: ").append(toIndentedString(readinessProbe)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("args");
    openapiFields.add("cmd");
    openapiFields.add("env");
    openapiFields.add("image");
    openapiFields.add("livenessProbe");
    openapiFields.add("name");
    openapiFields.add("readinessProbe");
    openapiFields.add("volumes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("image");
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SidecarSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SidecarSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SidecarSpec is not found in the empty JSON string", SidecarSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SidecarSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SidecarSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SidecarSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("args") != null && !jsonObj.get("args").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `args` to be an array in the JSON string but got `%s`", jsonObj.get("args").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cmd") != null && !jsonObj.get("cmd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cmd` to be an array in the JSON string but got `%s`", jsonObj.get("cmd").toString()));
      }
      if (jsonObj.get("env") != null && !jsonObj.get("env").isJsonNull()) {
        JsonArray jsonArrayenv = jsonObj.getAsJsonArray("env");
        if (jsonArrayenv != null) {
          // ensure the json data is an array
          if (!jsonObj.get("env").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `env` to be an array in the JSON string but got `%s`", jsonObj.get("env").toString()));
          }

          // validate the optional field `env` (array)
          for (int i = 0; i < jsonArrayenv.size(); i++) {
            Env.validateJsonObject(jsonArrayenv.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      // validate the optional field `livenessProbe`
      if (jsonObj.get("livenessProbe") != null && !jsonObj.get("livenessProbe").isJsonNull()) {
        HealthProbe.validateJsonObject(jsonObj.getAsJsonObject("livenessProbe"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `readinessProbe`
      if (jsonObj.get("readinessProbe") != null && !jsonObj.get("readinessProbe").isJsonNull()) {
        HealthProbe.validateJsonObject(jsonObj.getAsJsonObject("readinessProbe"));
      }
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        JsonArray jsonArrayvolumes = jsonObj.getAsJsonArray("volumes");
        if (jsonArrayvolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumes` to be an array in the JSON string but got `%s`", jsonObj.get("volumes").toString()));
          }

          // validate the optional field `volumes` (array)
          for (int i = 0; i < jsonArrayvolumes.size(); i++) {
            Volumes.validateJsonObject(jsonArrayvolumes.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SidecarSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SidecarSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SidecarSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SidecarSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<SidecarSpec>() {
           @Override
           public void write(JsonWriter out, SidecarSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SidecarSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SidecarSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SidecarSpec
  * @throws IOException if the JSON string is invalid with respect to SidecarSpec
  */
  public static SidecarSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SidecarSpec.class);
  }

 /**
  * Convert an instance of SidecarSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


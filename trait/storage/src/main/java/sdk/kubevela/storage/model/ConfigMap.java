/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.storage.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import sdk.kubevela.storage.model.Items;
import sdk.kubevela.storage.model.MountToEnv;
import sdk.kubevela.storage.model.MountToEnvs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.storage.JSON;

/**
 * ConfigMap
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:51:01.040889Z[Etc/UTC]")
public class ConfigMap {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_DEFAULT_MODE = "defaultMode";
  @SerializedName(SERIALIZED_NAME_DEFAULT_MODE)
  private Integer defaultMode = 420;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<Items> items = null;

  public static final String SERIALIZED_NAME_MOUNT_ONLY = "mountOnly";
  @SerializedName(SERIALIZED_NAME_MOUNT_ONLY)
  private Boolean mountOnly = false;

  public static final String SERIALIZED_NAME_MOUNT_PATH = "mountPath";
  @SerializedName(SERIALIZED_NAME_MOUNT_PATH)
  private String mountPath;

  public static final String SERIALIZED_NAME_MOUNT_TO_ENV = "mountToEnv";
  @SerializedName(SERIALIZED_NAME_MOUNT_TO_ENV)
  private MountToEnv mountToEnv;

  public static final String SERIALIZED_NAME_MOUNT_TO_ENVS = "mountToEnvs";
  @SerializedName(SERIALIZED_NAME_MOUNT_TO_ENVS)
  private List<MountToEnvs> mountToEnvs = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_READ_ONLY = "readOnly";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly = false;

  public static final String SERIALIZED_NAME_SUB_PATH = "subPath";
  @SerializedName(SERIALIZED_NAME_SUB_PATH)
  private String subPath;

  public ConfigMap() {
  }

  public ConfigMap data(Object data) {
    
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable

  public Object getData() {
    return data;
  }


  public void setData(Object data) {
    this.data = data;
  }


  public ConfigMap defaultMode(Integer defaultMode) {
    
    this.defaultMode = defaultMode;
    return this;
  }

   /**
   * Get defaultMode
   * @return defaultMode
  **/
  @javax.annotation.Nonnull

  public Integer getDefaultMode() {
    return defaultMode;
  }


  public void setDefaultMode(Integer defaultMode) {
    this.defaultMode = defaultMode;
  }


  public ConfigMap items(List<Items> items) {
    
    this.items = items;
    return this;
  }

  public ConfigMap addItemsItem(Items itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nullable

  public List<Items> getItems() {
    return items;
  }


  public void setItems(List<Items> items) {
    this.items = items;
  }


  public ConfigMap mountOnly(Boolean mountOnly) {
    
    this.mountOnly = mountOnly;
    return this;
  }

   /**
   * Get mountOnly
   * @return mountOnly
  **/
  @javax.annotation.Nonnull

  public Boolean getMountOnly() {
    return mountOnly;
  }


  public void setMountOnly(Boolean mountOnly) {
    this.mountOnly = mountOnly;
  }


  public ConfigMap mountPath(String mountPath) {
    
    this.mountPath = mountPath;
    return this;
  }

   /**
   * Get mountPath
   * @return mountPath
  **/
  @javax.annotation.Nullable

  public String getMountPath() {
    return mountPath;
  }


  public void setMountPath(String mountPath) {
    this.mountPath = mountPath;
  }


  public ConfigMap mountToEnv(MountToEnv mountToEnv) {
    
    this.mountToEnv = mountToEnv;
    return this;
  }

   /**
   * Get mountToEnv
   * @return mountToEnv
  **/
  @javax.annotation.Nullable

  public MountToEnv getMountToEnv() {
    return mountToEnv;
  }


  public void setMountToEnv(MountToEnv mountToEnv) {
    this.mountToEnv = mountToEnv;
  }


  public ConfigMap mountToEnvs(List<MountToEnvs> mountToEnvs) {
    
    this.mountToEnvs = mountToEnvs;
    return this;
  }

  public ConfigMap addMountToEnvsItem(MountToEnvs mountToEnvsItem) {
    if (this.mountToEnvs == null) {
      this.mountToEnvs = new ArrayList<>();
    }
    this.mountToEnvs.add(mountToEnvsItem);
    return this;
  }

   /**
   * Get mountToEnvs
   * @return mountToEnvs
  **/
  @javax.annotation.Nullable

  public List<MountToEnvs> getMountToEnvs() {
    return mountToEnvs;
  }


  public void setMountToEnvs(List<MountToEnvs> mountToEnvs) {
    this.mountToEnvs = mountToEnvs;
  }


  public ConfigMap name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ConfigMap readOnly(Boolean readOnly) {
    
    this.readOnly = readOnly;
    return this;
  }

   /**
   * Get readOnly
   * @return readOnly
  **/
  @javax.annotation.Nonnull

  public Boolean getReadOnly() {
    return readOnly;
  }


  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public ConfigMap subPath(String subPath) {
    
    this.subPath = subPath;
    return this;
  }

   /**
   * Get subPath
   * @return subPath
  **/
  @javax.annotation.Nullable

  public String getSubPath() {
    return subPath;
  }


  public void setSubPath(String subPath) {
    this.subPath = subPath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigMap configMap = (ConfigMap) o;
    return Objects.equals(this.data, configMap.data) &&
        Objects.equals(this.defaultMode, configMap.defaultMode) &&
        Objects.equals(this.items, configMap.items) &&
        Objects.equals(this.mountOnly, configMap.mountOnly) &&
        Objects.equals(this.mountPath, configMap.mountPath) &&
        Objects.equals(this.mountToEnv, configMap.mountToEnv) &&
        Objects.equals(this.mountToEnvs, configMap.mountToEnvs) &&
        Objects.equals(this.name, configMap.name) &&
        Objects.equals(this.readOnly, configMap.readOnly) &&
        Objects.equals(this.subPath, configMap.subPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, defaultMode, items, mountOnly, mountPath, mountToEnv, mountToEnvs, name, readOnly, subPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigMap {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    defaultMode: ").append(toIndentedString(defaultMode)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    mountOnly: ").append(toIndentedString(mountOnly)).append("\n");
    sb.append("    mountPath: ").append(toIndentedString(mountPath)).append("\n");
    sb.append("    mountToEnv: ").append(toIndentedString(mountToEnv)).append("\n");
    sb.append("    mountToEnvs: ").append(toIndentedString(mountToEnvs)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    subPath: ").append(toIndentedString(subPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("defaultMode");
    openapiFields.add("items");
    openapiFields.add("mountOnly");
    openapiFields.add("mountPath");
    openapiFields.add("mountToEnv");
    openapiFields.add("mountToEnvs");
    openapiFields.add("name");
    openapiFields.add("readOnly");
    openapiFields.add("subPath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("defaultMode");
    openapiRequiredFields.add("mountOnly");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("readOnly");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConfigMap
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConfigMap.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigMap is not found in the empty JSON string", ConfigMap.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConfigMap.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigMap` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigMap.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            Items.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("mountPath") != null && !jsonObj.get("mountPath").isJsonNull()) && !jsonObj.get("mountPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mountPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mountPath").toString()));
      }
      // validate the optional field `mountToEnv`
      if (jsonObj.get("mountToEnv") != null && !jsonObj.get("mountToEnv").isJsonNull()) {
        MountToEnv.validateJsonObject(jsonObj.getAsJsonObject("mountToEnv"));
      }
      if (jsonObj.get("mountToEnvs") != null && !jsonObj.get("mountToEnvs").isJsonNull()) {
        JsonArray jsonArraymountToEnvs = jsonObj.getAsJsonArray("mountToEnvs");
        if (jsonArraymountToEnvs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mountToEnvs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mountToEnvs` to be an array in the JSON string but got `%s`", jsonObj.get("mountToEnvs").toString()));
          }

          // validate the optional field `mountToEnvs` (array)
          for (int i = 0; i < jsonArraymountToEnvs.size(); i++) {
            MountToEnvs.validateJsonObject(jsonArraymountToEnvs.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("subPath") != null && !jsonObj.get("subPath").isJsonNull()) && !jsonObj.get("subPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subPath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigMap.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigMap' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigMap> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigMap.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigMap>() {
           @Override
           public void write(JsonWriter out, ConfigMap value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigMap read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConfigMap given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConfigMap
  * @throws IOException if the JSON string is invalid with respect to ConfigMap
  */
  public static ConfigMap fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigMap.class);
  }

 /**
  * Convert an instance of ConfigMap to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


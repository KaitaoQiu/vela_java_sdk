/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.build_push_image.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import sdk.kubevela.build_push_image.model.Context;
import sdk.kubevela.build_push_image.model.Credentials;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.build_push_image.JSON;

/**
 * BuildPushImageSpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:49:15.398639Z[Etc/UTC]")
public class BuildPushImageSpec {
  public static final String SERIALIZED_NAME_BUILD_ARGS = "buildArgs";
  @SerializedName(SERIALIZED_NAME_BUILD_ARGS)
  private List<String> buildArgs = null;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private Context context;

  public static final String SERIALIZED_NAME_CREDENTIALS = "credentials";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS)
  private Credentials credentials;

  public static final String SERIALIZED_NAME_DOCKERFILE = "dockerfile";
  @SerializedName(SERIALIZED_NAME_DOCKERFILE)
  private String dockerfile = "./Dockerfile";

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_KANIKO_EXECUTOR = "kanikoExecutor";
  @SerializedName(SERIALIZED_NAME_KANIKO_EXECUTOR)
  private String kanikoExecutor = "oamdev/kaniko-executor:v1.9.1";

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  /**
   * Specify the verbosity level
   */
  @JsonAdapter(VerbosityEnum.Adapter.class)
  public enum VerbosityEnum {
    INFO("info"),
    
    PANIC("panic"),
    
    FATAL("fatal"),
    
    ERROR("error"),
    
    WARN("warn"),
    
    DEBUG("debug"),
    
    TRACE("trace");

    private String value;

    VerbosityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerbosityEnum fromValue(String value) {
      for (VerbosityEnum b : VerbosityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerbosityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerbosityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerbosityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerbosityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VERBOSITY = "verbosity";
  @SerializedName(SERIALIZED_NAME_VERBOSITY)
  private VerbosityEnum verbosity = VerbosityEnum.INFO;

  public BuildPushImageSpec() {
  }

  public BuildPushImageSpec buildArgs(List<String> buildArgs) {
    
    this.buildArgs = buildArgs;
    return this;
  }

  public BuildPushImageSpec addBuildArgsItem(String buildArgsItem) {
    if (this.buildArgs == null) {
      this.buildArgs = new ArrayList<>();
    }
    this.buildArgs.add(buildArgsItem);
    return this;
  }

   /**
   * Specify the build args
   * @return buildArgs
  **/
  @javax.annotation.Nullable

  public List<String> getBuildArgs() {
    return buildArgs;
  }


  public void setBuildArgs(List<String> buildArgs) {
    this.buildArgs = buildArgs;
  }


  public BuildPushImageSpec context(Context context) {
    
    this.context = context;
    return this;
  }

   /**
   * Get context
   * @return context
  **/
  @javax.annotation.Nonnull

  public Context getContext() {
    return context;
  }


  public void setContext(Context context) {
    this.context = context;
  }


  public BuildPushImageSpec credentials(Credentials credentials) {
    
    this.credentials = credentials;
    return this;
  }

   /**
   * Get credentials
   * @return credentials
  **/
  @javax.annotation.Nullable

  public Credentials getCredentials() {
    return credentials;
  }


  public void setCredentials(Credentials credentials) {
    this.credentials = credentials;
  }


  public BuildPushImageSpec dockerfile(String dockerfile) {
    
    this.dockerfile = dockerfile;
    return this;
  }

   /**
   * Specify the dockerfile
   * @return dockerfile
  **/
  @javax.annotation.Nonnull

  public String getDockerfile() {
    return dockerfile;
  }


  public void setDockerfile(String dockerfile) {
    this.dockerfile = dockerfile;
  }


  public BuildPushImageSpec image(String image) {
    
    this.image = image;
    return this;
  }

   /**
   * Specify the image
   * @return image
  **/
  @javax.annotation.Nonnull

  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    this.image = image;
  }


  public BuildPushImageSpec kanikoExecutor(String kanikoExecutor) {
    
    this.kanikoExecutor = kanikoExecutor;
    return this;
  }

   /**
   * Specify the kaniko executor image, default to oamdev/kaniko-executor:v1.9.1
   * @return kanikoExecutor
  **/
  @javax.annotation.Nonnull

  public String getKanikoExecutor() {
    return kanikoExecutor;
  }


  public void setKanikoExecutor(String kanikoExecutor) {
    this.kanikoExecutor = kanikoExecutor;
  }


  public BuildPushImageSpec platform(String platform) {
    
    this.platform = platform;
    return this;
  }

   /**
   * Specify the platform to build
   * @return platform
  **/
  @javax.annotation.Nullable

  public String getPlatform() {
    return platform;
  }


  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public BuildPushImageSpec verbosity(VerbosityEnum verbosity) {
    
    this.verbosity = verbosity;
    return this;
  }

   /**
   * Specify the verbosity level
   * @return verbosity
  **/
  @javax.annotation.Nonnull

  public VerbosityEnum getVerbosity() {
    return verbosity;
  }


  public void setVerbosity(VerbosityEnum verbosity) {
    this.verbosity = verbosity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildPushImageSpec buildPushImageSpec = (BuildPushImageSpec) o;
    return Objects.equals(this.buildArgs, buildPushImageSpec.buildArgs) &&
        Objects.equals(this.context, buildPushImageSpec.context) &&
        Objects.equals(this.credentials, buildPushImageSpec.credentials) &&
        Objects.equals(this.dockerfile, buildPushImageSpec.dockerfile) &&
        Objects.equals(this.image, buildPushImageSpec.image) &&
        Objects.equals(this.kanikoExecutor, buildPushImageSpec.kanikoExecutor) &&
        Objects.equals(this.platform, buildPushImageSpec.platform) &&
        Objects.equals(this.verbosity, buildPushImageSpec.verbosity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildArgs, context, credentials, dockerfile, image, kanikoExecutor, platform, verbosity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildPushImageSpec {\n");
    sb.append("    buildArgs: ").append(toIndentedString(buildArgs)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    dockerfile: ").append(toIndentedString(dockerfile)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    kanikoExecutor: ").append(toIndentedString(kanikoExecutor)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    verbosity: ").append(toIndentedString(verbosity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buildArgs");
    openapiFields.add("context");
    openapiFields.add("credentials");
    openapiFields.add("dockerfile");
    openapiFields.add("image");
    openapiFields.add("kanikoExecutor");
    openapiFields.add("platform");
    openapiFields.add("verbosity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("context");
    openapiRequiredFields.add("dockerfile");
    openapiRequiredFields.add("image");
    openapiRequiredFields.add("kanikoExecutor");
    openapiRequiredFields.add("verbosity");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BuildPushImageSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BuildPushImageSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildPushImageSpec is not found in the empty JSON string", BuildPushImageSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BuildPushImageSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildPushImageSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BuildPushImageSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("buildArgs") != null && !jsonObj.get("buildArgs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildArgs` to be an array in the JSON string but got `%s`", jsonObj.get("buildArgs").toString()));
      }
      // validate the required field `context`
      Context.validateJsonObject(jsonObj.getAsJsonObject("context"));
      // validate the optional field `credentials`
      if (jsonObj.get("credentials") != null && !jsonObj.get("credentials").isJsonNull()) {
        Credentials.validateJsonObject(jsonObj.getAsJsonObject("credentials"));
      }
      if (!jsonObj.get("dockerfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockerfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockerfile").toString()));
      }
      if (!jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if (!jsonObj.get("kanikoExecutor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kanikoExecutor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kanikoExecutor").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      if (!jsonObj.get("verbosity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verbosity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verbosity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildPushImageSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildPushImageSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildPushImageSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildPushImageSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildPushImageSpec>() {
           @Override
           public void write(JsonWriter out, BuildPushImageSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildPushImageSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BuildPushImageSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BuildPushImageSpec
  * @throws IOException if the JSON string is invalid with respect to BuildPushImageSpec
  */
  public static BuildPushImageSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildPushImageSpec.class);
  }

 /**
  * Convert an instance of BuildPushImageSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


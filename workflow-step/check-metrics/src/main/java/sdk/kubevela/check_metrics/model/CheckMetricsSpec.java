/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.check_metrics.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import sdk.kubevela.check_metrics.model.MetricEndpoint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.check_metrics.JSON;

/**
 * CheckMetricsSpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:49:17.145176Z[Etc/UTC]")
public class CheckMetricsSpec {
  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private String condition;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration = "5m";

  public static final String SERIALIZED_NAME_FAIL_DURATION = "failDuration";
  @SerializedName(SERIALIZED_NAME_FAIL_DURATION)
  private String failDuration = "2m";

  public static final String SERIALIZED_NAME_METRIC_ENDPOINT = "metricEndpoint";
  @SerializedName(SERIALIZED_NAME_METRIC_ENDPOINT)
  private MetricEndpoint metricEndpoint;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public CheckMetricsSpec() {
  }

  public CheckMetricsSpec condition(String condition) {
    
    this.condition = condition;
    return this;
  }

   /**
   * Condition is an expression which determines if a measurement is considered successful. eg: &gt;&#x3D;0.95
   * @return condition
  **/
  @javax.annotation.Nonnull

  public String getCondition() {
    return condition;
  }


  public void setCondition(String condition) {
    this.condition = condition;
  }


  public CheckMetricsSpec duration(String duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * Duration defines the duration of time required for this step to be considered successful.
   * @return duration
  **/
  @javax.annotation.Nullable

  public String getDuration() {
    return duration;
  }


  public void setDuration(String duration) {
    this.duration = duration;
  }


  public CheckMetricsSpec failDuration(String failDuration) {
    
    this.failDuration = failDuration;
    return this;
  }

   /**
   * FailDuration is the duration of time that, if the check fails, will result in the step being marked as failed.
   * @return failDuration
  **/
  @javax.annotation.Nullable

  public String getFailDuration() {
    return failDuration;
  }


  public void setFailDuration(String failDuration) {
    this.failDuration = failDuration;
  }


  public CheckMetricsSpec metricEndpoint(MetricEndpoint metricEndpoint) {
    
    this.metricEndpoint = metricEndpoint;
    return this;
  }

   /**
   * Get metricEndpoint
   * @return metricEndpoint
  **/
  @javax.annotation.Nullable

  public MetricEndpoint getMetricEndpoint() {
    return metricEndpoint;
  }


  public void setMetricEndpoint(MetricEndpoint metricEndpoint) {
    this.metricEndpoint = metricEndpoint;
  }


  public CheckMetricsSpec query(String query) {
    
    this.query = query;
    return this;
  }

   /**
   * Query is a raw prometheus query to perform
   * @return query
  **/
  @javax.annotation.Nonnull

  public String getQuery() {
    return query;
  }


  public void setQuery(String query) {
    this.query = query;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckMetricsSpec checkMetricsSpec = (CheckMetricsSpec) o;
    return Objects.equals(this.condition, checkMetricsSpec.condition) &&
        Objects.equals(this.duration, checkMetricsSpec.duration) &&
        Objects.equals(this.failDuration, checkMetricsSpec.failDuration) &&
        Objects.equals(this.metricEndpoint, checkMetricsSpec.metricEndpoint) &&
        Objects.equals(this.query, checkMetricsSpec.query);
  }

  @Override
  public int hashCode() {
    return Objects.hash(condition, duration, failDuration, metricEndpoint, query);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckMetricsSpec {\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    failDuration: ").append(toIndentedString(failDuration)).append("\n");
    sb.append("    metricEndpoint: ").append(toIndentedString(metricEndpoint)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("condition");
    openapiFields.add("duration");
    openapiFields.add("failDuration");
    openapiFields.add("metricEndpoint");
    openapiFields.add("query");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("condition");
    openapiRequiredFields.add("query");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CheckMetricsSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CheckMetricsSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckMetricsSpec is not found in the empty JSON string", CheckMetricsSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CheckMetricsSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckMetricsSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckMetricsSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("condition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("failDuration") != null && !jsonObj.get("failDuration").isJsonNull()) && !jsonObj.get("failDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failDuration").toString()));
      }
      // validate the optional field `metricEndpoint`
      if (jsonObj.get("metricEndpoint") != null && !jsonObj.get("metricEndpoint").isJsonNull()) {
        MetricEndpoint.validateJsonObject(jsonObj.getAsJsonObject("metricEndpoint"));
      }
      if (!jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckMetricsSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckMetricsSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckMetricsSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckMetricsSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckMetricsSpec>() {
           @Override
           public void write(JsonWriter out, CheckMetricsSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckMetricsSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckMetricsSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckMetricsSpec
  * @throws IOException if the JSON string is invalid with respect to CheckMetricsSpec
  */
  public static CheckMetricsSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckMetricsSpec.class);
  }

 /**
  * Convert an instance of CheckMetricsSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


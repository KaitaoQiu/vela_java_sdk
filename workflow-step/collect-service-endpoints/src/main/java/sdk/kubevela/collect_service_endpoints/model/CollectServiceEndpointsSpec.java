/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.collect_service_endpoints.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.collect_service_endpoints.JSON;

/**
 * CollectServiceEndpointsSpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:49:20.521939Z[Etc/UTC]")
public class CollectServiceEndpointsSpec {
  public static final String SERIALIZED_NAME_COMPONENTS = "components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  private List<String> components = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_OUTER = "outer";
  @SerializedName(SERIALIZED_NAME_OUTER)
  private Boolean outer;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PORT_NAME = "portName";
  @SerializedName(SERIALIZED_NAME_PORT_NAME)
  private String portName;

  /**
   * The protocal of endpoint url
   */
  @JsonAdapter(ProtocalEnum.Adapter.class)
  public enum ProtocalEnum {
    HTTP("http"),
    
    HTTPS("https");

    private String value;

    ProtocalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocalEnum fromValue(String value) {
      for (ProtocalEnum b : ProtocalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocalEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROTOCAL = "protocal";
  @SerializedName(SERIALIZED_NAME_PROTOCAL)
  private ProtocalEnum protocal = ProtocalEnum.HTTP;

  public CollectServiceEndpointsSpec() {
  }

  public CollectServiceEndpointsSpec components(List<String> components) {
    
    this.components = components;
    return this;
  }

  public CollectServiceEndpointsSpec addComponentsItem(String componentsItem) {
    if (this.components == null) {
      this.components = new ArrayList<>();
    }
    this.components.add(componentsItem);
    return this;
  }

   /**
   * Filter the component of the endpoints
   * @return components
  **/
  @javax.annotation.Nullable

  public List<String> getComponents() {
    return components;
  }


  public void setComponents(List<String> components) {
    this.components = components;
  }


  public CollectServiceEndpointsSpec name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Specify the name of the application
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CollectServiceEndpointsSpec namespace(String namespace) {
    
    this.namespace = namespace;
    return this;
  }

   /**
   * Specify the namespace of the application
   * @return namespace
  **/
  @javax.annotation.Nullable

  public String getNamespace() {
    return namespace;
  }


  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public CollectServiceEndpointsSpec outer(Boolean outer) {
    
    this.outer = outer;
    return this;
  }

   /**
   * Filter the endpoint that are only outer
   * @return outer
  **/
  @javax.annotation.Nullable

  public Boolean getOuter() {
    return outer;
  }


  public void setOuter(Boolean outer) {
    this.outer = outer;
  }


  public CollectServiceEndpointsSpec port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * Filter the port of the endpoints
   * @return port
  **/
  @javax.annotation.Nullable

  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }


  public CollectServiceEndpointsSpec portName(String portName) {
    
    this.portName = portName;
    return this;
  }

   /**
   * Filter the port name of the endpoints
   * @return portName
  **/
  @javax.annotation.Nullable

  public String getPortName() {
    return portName;
  }


  public void setPortName(String portName) {
    this.portName = portName;
  }


  public CollectServiceEndpointsSpec protocal(ProtocalEnum protocal) {
    
    this.protocal = protocal;
    return this;
  }

   /**
   * The protocal of endpoint url
   * @return protocal
  **/
  @javax.annotation.Nonnull

  public ProtocalEnum getProtocal() {
    return protocal;
  }


  public void setProtocal(ProtocalEnum protocal) {
    this.protocal = protocal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectServiceEndpointsSpec collectServiceEndpointsSpec = (CollectServiceEndpointsSpec) o;
    return Objects.equals(this.components, collectServiceEndpointsSpec.components) &&
        Objects.equals(this.name, collectServiceEndpointsSpec.name) &&
        Objects.equals(this.namespace, collectServiceEndpointsSpec.namespace) &&
        Objects.equals(this.outer, collectServiceEndpointsSpec.outer) &&
        Objects.equals(this.port, collectServiceEndpointsSpec.port) &&
        Objects.equals(this.portName, collectServiceEndpointsSpec.portName) &&
        Objects.equals(this.protocal, collectServiceEndpointsSpec.protocal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(components, name, namespace, outer, port, portName, protocal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectServiceEndpointsSpec {\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    outer: ").append(toIndentedString(outer)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    portName: ").append(toIndentedString(portName)).append("\n");
    sb.append("    protocal: ").append(toIndentedString(protocal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("components");
    openapiFields.add("name");
    openapiFields.add("namespace");
    openapiFields.add("outer");
    openapiFields.add("port");
    openapiFields.add("portName");
    openapiFields.add("protocal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("protocal");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CollectServiceEndpointsSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CollectServiceEndpointsSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CollectServiceEndpointsSpec is not found in the empty JSON string", CollectServiceEndpointsSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CollectServiceEndpointsSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CollectServiceEndpointsSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CollectServiceEndpointsSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("components") != null && !jsonObj.get("components").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `components` to be an array in the JSON string but got `%s`", jsonObj.get("components").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("portName") != null && !jsonObj.get("portName").isJsonNull()) && !jsonObj.get("portName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portName").toString()));
      }
      if (!jsonObj.get("protocal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocal").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CollectServiceEndpointsSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CollectServiceEndpointsSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CollectServiceEndpointsSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CollectServiceEndpointsSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<CollectServiceEndpointsSpec>() {
           @Override
           public void write(JsonWriter out, CollectServiceEndpointsSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CollectServiceEndpointsSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CollectServiceEndpointsSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CollectServiceEndpointsSpec
  * @throws IOException if the JSON string is invalid with respect to CollectServiceEndpointsSpec
  */
  public static CollectServiceEndpointsSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CollectServiceEndpointsSpec.class);
  }

 /**
  * Convert an instance of CollectServiceEndpointsSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


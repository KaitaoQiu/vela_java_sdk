/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.export2secret.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import sdk.kubevela.export2secret.model.DockerRegistry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.export2secret.JSON;

/**
 * Export2secretSpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:49:50.022079Z[Etc/UTC]")
public class Export2secretSpec {
  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private String cluster = "";

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_DOCKER_REGISTRY = "dockerRegistry";
  @SerializedName(SERIALIZED_NAME_DOCKER_REGISTRY)
  private DockerRegistry dockerRegistry;

  /**
   * Specify the kind of the secret
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    GENERIC("generic"),
    
    DOCKER_REGISTRY("docker-registry");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KindEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private KindEnum kind = KindEnum.GENERIC;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_SECRET_NAME = "secretName";
  @SerializedName(SERIALIZED_NAME_SECRET_NAME)
  private String secretName;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Export2secretSpec() {
  }

  public Export2secretSpec cluster(String cluster) {
    
    this.cluster = cluster;
    return this;
  }

   /**
   * Specify the cluster of the secret
   * @return cluster
  **/
  @javax.annotation.Nonnull

  public String getCluster() {
    return cluster;
  }


  public void setCluster(String cluster) {
    this.cluster = cluster;
  }


  public Export2secretSpec data(Object data) {
    
    this.data = data;
    return this;
  }

   /**
   * Specify the data of secret
   * @return data
  **/
  @javax.annotation.Nonnull

  public Object getData() {
    return data;
  }


  public void setData(Object data) {
    this.data = data;
  }


  public Export2secretSpec dockerRegistry(DockerRegistry dockerRegistry) {
    
    this.dockerRegistry = dockerRegistry;
    return this;
  }

   /**
   * Get dockerRegistry
   * @return dockerRegistry
  **/
  @javax.annotation.Nullable

  public DockerRegistry getDockerRegistry() {
    return dockerRegistry;
  }


  public void setDockerRegistry(DockerRegistry dockerRegistry) {
    this.dockerRegistry = dockerRegistry;
  }


  public Export2secretSpec kind(KindEnum kind) {
    
    this.kind = kind;
    return this;
  }

   /**
   * Specify the kind of the secret
   * @return kind
  **/
  @javax.annotation.Nonnull

  public KindEnum getKind() {
    return kind;
  }


  public void setKind(KindEnum kind) {
    this.kind = kind;
  }


  public Export2secretSpec namespace(String namespace) {
    
    this.namespace = namespace;
    return this;
  }

   /**
   * Specify the namespace of the secret
   * @return namespace
  **/
  @javax.annotation.Nullable

  public String getNamespace() {
    return namespace;
  }


  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public Export2secretSpec secretName(String secretName) {
    
    this.secretName = secretName;
    return this;
  }

   /**
   * Specify the name of the secret
   * @return secretName
  **/
  @javax.annotation.Nonnull

  public String getSecretName() {
    return secretName;
  }


  public void setSecretName(String secretName) {
    this.secretName = secretName;
  }


  public Export2secretSpec type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Specify the type of the secret
   * @return type
  **/
  @javax.annotation.Nullable

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Export2secretSpec export2secretSpec = (Export2secretSpec) o;
    return Objects.equals(this.cluster, export2secretSpec.cluster) &&
        Objects.equals(this.data, export2secretSpec.data) &&
        Objects.equals(this.dockerRegistry, export2secretSpec.dockerRegistry) &&
        Objects.equals(this.kind, export2secretSpec.kind) &&
        Objects.equals(this.namespace, export2secretSpec.namespace) &&
        Objects.equals(this.secretName, export2secretSpec.secretName) &&
        Objects.equals(this.type, export2secretSpec.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cluster, data, dockerRegistry, kind, namespace, secretName, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Export2secretSpec {\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    dockerRegistry: ").append(toIndentedString(dockerRegistry)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    secretName: ").append(toIndentedString(secretName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cluster");
    openapiFields.add("data");
    openapiFields.add("dockerRegistry");
    openapiFields.add("kind");
    openapiFields.add("namespace");
    openapiFields.add("secretName");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cluster");
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("kind");
    openapiRequiredFields.add("secretName");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Export2secretSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Export2secretSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Export2secretSpec is not found in the empty JSON string", Export2secretSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Export2secretSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Export2secretSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Export2secretSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("cluster").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster").toString()));
      }
      // validate the optional field `dockerRegistry`
      if (jsonObj.get("dockerRegistry") != null && !jsonObj.get("dockerRegistry").isJsonNull()) {
        DockerRegistry.validateJsonObject(jsonObj.getAsJsonObject("dockerRegistry"));
      }
      if (!jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if (!jsonObj.get("secretName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretName").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Export2secretSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Export2secretSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Export2secretSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Export2secretSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<Export2secretSpec>() {
           @Override
           public void write(JsonWriter out, Export2secretSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Export2secretSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Export2secretSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Export2secretSpec
  * @throws IOException if the JSON string is invalid with respect to Export2secretSpec
  */
  public static Export2secretSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Export2secretSpec.class);
  }

 /**
  * Convert an instance of Export2secretSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.notification.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import sdk.kubevela.notification.model.Btns;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.notification.JSON;

/**
 * ActionCard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:50:22.794956Z[Etc/UTC]")
public class ActionCard {
  public static final String SERIALIZED_NAME_BTN_ORIENTATION = "btnOrientation";
  @SerializedName(SERIALIZED_NAME_BTN_ORIENTATION)
  private String btnOrientation;

  public static final String SERIALIZED_NAME_BTNS = "btns";
  @SerializedName(SERIALIZED_NAME_BTNS)
  private List<Btns> btns = null;

  public static final String SERIALIZED_NAME_HIDE_AVATAR = "hideAvatar";
  @SerializedName(SERIALIZED_NAME_HIDE_AVATAR)
  private String hideAvatar;

  public static final String SERIALIZED_NAME_SINGLE_TITLE = "singleTitle";
  @SerializedName(SERIALIZED_NAME_SINGLE_TITLE)
  private String singleTitle;

  public static final String SERIALIZED_NAME_SINGLE_U_R_L = "singleURL";
  @SerializedName(SERIALIZED_NAME_SINGLE_U_R_L)
  private String singleURL;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public ActionCard() {
  }

  public ActionCard btnOrientation(String btnOrientation) {
    
    this.btnOrientation = btnOrientation;
    return this;
  }

   /**
   * Get btnOrientation
   * @return btnOrientation
  **/
  @javax.annotation.Nonnull

  public String getBtnOrientation() {
    return btnOrientation;
  }


  public void setBtnOrientation(String btnOrientation) {
    this.btnOrientation = btnOrientation;
  }


  public ActionCard btns(List<Btns> btns) {
    
    this.btns = btns;
    return this;
  }

  public ActionCard addBtnsItem(Btns btnsItem) {
    if (this.btns == null) {
      this.btns = new ArrayList<>();
    }
    this.btns.add(btnsItem);
    return this;
  }

   /**
   * Get btns
   * @return btns
  **/
  @javax.annotation.Nullable

  public List<Btns> getBtns() {
    return btns;
  }


  public void setBtns(List<Btns> btns) {
    this.btns = btns;
  }


  public ActionCard hideAvatar(String hideAvatar) {
    
    this.hideAvatar = hideAvatar;
    return this;
  }

   /**
   * Get hideAvatar
   * @return hideAvatar
  **/
  @javax.annotation.Nonnull

  public String getHideAvatar() {
    return hideAvatar;
  }


  public void setHideAvatar(String hideAvatar) {
    this.hideAvatar = hideAvatar;
  }


  public ActionCard singleTitle(String singleTitle) {
    
    this.singleTitle = singleTitle;
    return this;
  }

   /**
   * Get singleTitle
   * @return singleTitle
  **/
  @javax.annotation.Nonnull

  public String getSingleTitle() {
    return singleTitle;
  }


  public void setSingleTitle(String singleTitle) {
    this.singleTitle = singleTitle;
  }


  public ActionCard singleURL(String singleURL) {
    
    this.singleURL = singleURL;
    return this;
  }

   /**
   * Get singleURL
   * @return singleURL
  **/
  @javax.annotation.Nonnull

  public String getSingleURL() {
    return singleURL;
  }


  public void setSingleURL(String singleURL) {
    this.singleURL = singleURL;
  }


  public ActionCard text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @javax.annotation.Nonnull

  public String getText() {
    return text;
  }


  public void setText(String text) {
    this.text = text;
  }


  public ActionCard title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionCard actionCard = (ActionCard) o;
    return Objects.equals(this.btnOrientation, actionCard.btnOrientation) &&
        Objects.equals(this.btns, actionCard.btns) &&
        Objects.equals(this.hideAvatar, actionCard.hideAvatar) &&
        Objects.equals(this.singleTitle, actionCard.singleTitle) &&
        Objects.equals(this.singleURL, actionCard.singleURL) &&
        Objects.equals(this.text, actionCard.text) &&
        Objects.equals(this.title, actionCard.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(btnOrientation, btns, hideAvatar, singleTitle, singleURL, text, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionCard {\n");
    sb.append("    btnOrientation: ").append(toIndentedString(btnOrientation)).append("\n");
    sb.append("    btns: ").append(toIndentedString(btns)).append("\n");
    sb.append("    hideAvatar: ").append(toIndentedString(hideAvatar)).append("\n");
    sb.append("    singleTitle: ").append(toIndentedString(singleTitle)).append("\n");
    sb.append("    singleURL: ").append(toIndentedString(singleURL)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("btnOrientation");
    openapiFields.add("btns");
    openapiFields.add("hideAvatar");
    openapiFields.add("singleTitle");
    openapiFields.add("singleURL");
    openapiFields.add("text");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("btnOrientation");
    openapiRequiredFields.add("hideAvatar");
    openapiRequiredFields.add("singleTitle");
    openapiRequiredFields.add("singleURL");
    openapiRequiredFields.add("text");
    openapiRequiredFields.add("title");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ActionCard
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ActionCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActionCard is not found in the empty JSON string", ActionCard.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ActionCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActionCard` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ActionCard.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("btnOrientation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `btnOrientation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("btnOrientation").toString()));
      }
      if (jsonObj.get("btns") != null && !jsonObj.get("btns").isJsonNull()) {
        JsonArray jsonArraybtns = jsonObj.getAsJsonArray("btns");
        if (jsonArraybtns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("btns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `btns` to be an array in the JSON string but got `%s`", jsonObj.get("btns").toString()));
          }

          // validate the optional field `btns` (array)
          for (int i = 0; i < jsonArraybtns.size(); i++) {
            Btns.validateJsonObject(jsonArraybtns.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("hideAvatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hideAvatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hideAvatar").toString()));
      }
      if (!jsonObj.get("singleTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `singleTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("singleTitle").toString()));
      }
      if (!jsonObj.get("singleURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `singleURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("singleURL").toString()));
      }
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActionCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActionCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActionCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActionCard.class));

       return (TypeAdapter<T>) new TypeAdapter<ActionCard>() {
           @Override
           public void write(JsonWriter out, ActionCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActionCard read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ActionCard given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ActionCard
  * @throws IOException if the JSON string is invalid with respect to ActionCard
  */
  public static ActionCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActionCard.class);
  }

 /**
  * Convert an instance of ActionCard to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


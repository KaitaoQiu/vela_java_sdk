/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.vela_cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import sdk.kubevela.vela_cli.model.HostPath;
import sdk.kubevela.vela_cli.model.Secret;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.vela_cli.JSON;

/**
 * Storage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:51:11.814067Z[Etc/UTC]")
public class Storage {
  public static final String SERIALIZED_NAME_HOST_PATH = "hostPath";
  @SerializedName(SERIALIZED_NAME_HOST_PATH)
  private List<HostPath> hostPath = null;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private List<Secret> secret = null;

  public Storage() {
  }

  public Storage hostPath(List<HostPath> hostPath) {
    
    this.hostPath = hostPath;
    return this;
  }

  public Storage addHostPathItem(HostPath hostPathItem) {
    if (this.hostPath == null) {
      this.hostPath = new ArrayList<>();
    }
    this.hostPath.add(hostPathItem);
    return this;
  }

   /**
   * Declare host path type storage
   * @return hostPath
  **/
  @javax.annotation.Nullable

  public List<HostPath> getHostPath() {
    return hostPath;
  }


  public void setHostPath(List<HostPath> hostPath) {
    this.hostPath = hostPath;
  }


  public Storage secret(List<Secret> secret) {
    
    this.secret = secret;
    return this;
  }

  public Storage addSecretItem(Secret secretItem) {
    if (this.secret == null) {
      this.secret = new ArrayList<>();
    }
    this.secret.add(secretItem);
    return this;
  }

   /**
   * Mount Secret type storage
   * @return secret
  **/
  @javax.annotation.Nullable

  public List<Secret> getSecret() {
    return secret;
  }


  public void setSecret(List<Secret> secret) {
    this.secret = secret;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Storage storage = (Storage) o;
    return Objects.equals(this.hostPath, storage.hostPath) &&
        Objects.equals(this.secret, storage.secret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostPath, secret);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Storage {\n");
    sb.append("    hostPath: ").append(toIndentedString(hostPath)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hostPath");
    openapiFields.add("secret");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Storage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Storage.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Storage is not found in the empty JSON string", Storage.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Storage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Storage` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("hostPath") != null && !jsonObj.get("hostPath").isJsonNull()) {
        JsonArray jsonArrayhostPath = jsonObj.getAsJsonArray("hostPath");
        if (jsonArrayhostPath != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hostPath").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hostPath` to be an array in the JSON string but got `%s`", jsonObj.get("hostPath").toString()));
          }

          // validate the optional field `hostPath` (array)
          for (int i = 0; i < jsonArrayhostPath.size(); i++) {
            HostPath.validateJsonObject(jsonArrayhostPath.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) {
        JsonArray jsonArraysecret = jsonObj.getAsJsonArray("secret");
        if (jsonArraysecret != null) {
          // ensure the json data is an array
          if (!jsonObj.get("secret").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `secret` to be an array in the JSON string but got `%s`", jsonObj.get("secret").toString()));
          }

          // validate the optional field `secret` (array)
          for (int i = 0; i < jsonArraysecret.size(); i++) {
            Secret.validateJsonObject(jsonArraysecret.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Storage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Storage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Storage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Storage.class));

       return (TypeAdapter<T>) new TypeAdapter<Storage>() {
           @Override
           public void write(JsonWriter out, Storage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Storage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Storage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Storage
  * @throws IOException if the JSON string is invalid with respect to Storage
  */
  public static Storage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Storage.class);
  }

 /**
  * Convert an instance of Storage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


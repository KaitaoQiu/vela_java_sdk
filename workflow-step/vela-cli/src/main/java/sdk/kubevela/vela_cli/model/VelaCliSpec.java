/*
 * Generated by cue.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: no version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sdk.kubevela.vela_cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import sdk.kubevela.vela_cli.model.Storage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sdk.kubevela.vela_cli.JSON;

/**
 * VelaCliSpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-16T03:51:11.814067Z[Etc/UTC]")
public class VelaCliSpec {
  public static final String SERIALIZED_NAME_ADDON_NAME = "addonName";
  @SerializedName(SERIALIZED_NAME_ADDON_NAME)
  private String addonName;

  public static final String SERIALIZED_NAME_COMMAND = "command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private List<String> command = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image = "oamdev/vela-cli:v1.6.4";

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_NAME = "serviceAccountName";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_NAME)
  private String serviceAccountName = "kubevela-vela-core";

  public static final String SERIALIZED_NAME_STORAGE = "storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  private Storage storage;

  public VelaCliSpec() {
  }

  public VelaCliSpec addonName(String addonName) {
    
    this.addonName = addonName;
    return this;
  }

   /**
   * Specify the name of the addon.
   * @return addonName
  **/
  @javax.annotation.Nonnull

  public String getAddonName() {
    return addonName;
  }


  public void setAddonName(String addonName) {
    this.addonName = addonName;
  }


  public VelaCliSpec command(List<String> command) {
    
    this.command = command;
    return this;
  }

  public VelaCliSpec addCommandItem(String commandItem) {
    this.command.add(commandItem);
    return this;
  }

   /**
   * Specify the vela command
   * @return command
  **/
  @javax.annotation.Nonnull

  public List<String> getCommand() {
    return command;
  }


  public void setCommand(List<String> command) {
    this.command = command;
  }


  public VelaCliSpec image(String image) {
    
    this.image = image;
    return this;
  }

   /**
   * Specify the image
   * @return image
  **/
  @javax.annotation.Nonnull

  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    this.image = image;
  }


  public VelaCliSpec serviceAccountName(String serviceAccountName) {
    
    this.serviceAccountName = serviceAccountName;
    return this;
  }

   /**
   * specify serviceAccountName want to use
   * @return serviceAccountName
  **/
  @javax.annotation.Nonnull

  public String getServiceAccountName() {
    return serviceAccountName;
  }


  public void setServiceAccountName(String serviceAccountName) {
    this.serviceAccountName = serviceAccountName;
  }


  public VelaCliSpec storage(Storage storage) {
    
    this.storage = storage;
    return this;
  }

   /**
   * Get storage
   * @return storage
  **/
  @javax.annotation.Nullable

  public Storage getStorage() {
    return storage;
  }


  public void setStorage(Storage storage) {
    this.storage = storage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VelaCliSpec velaCliSpec = (VelaCliSpec) o;
    return Objects.equals(this.addonName, velaCliSpec.addonName) &&
        Objects.equals(this.command, velaCliSpec.command) &&
        Objects.equals(this.image, velaCliSpec.image) &&
        Objects.equals(this.serviceAccountName, velaCliSpec.serviceAccountName) &&
        Objects.equals(this.storage, velaCliSpec.storage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addonName, command, image, serviceAccountName, storage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VelaCliSpec {\n");
    sb.append("    addonName: ").append(toIndentedString(addonName)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    serviceAccountName: ").append(toIndentedString(serviceAccountName)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addonName");
    openapiFields.add("command");
    openapiFields.add("image");
    openapiFields.add("serviceAccountName");
    openapiFields.add("storage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addonName");
    openapiRequiredFields.add("command");
    openapiRequiredFields.add("image");
    openapiRequiredFields.add("serviceAccountName");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VelaCliSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VelaCliSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VelaCliSpec is not found in the empty JSON string", VelaCliSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!VelaCliSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VelaCliSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VelaCliSpec.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("addonName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addonName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addonName").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("command") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("command").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `command` to be an array in the JSON string but got `%s`", jsonObj.get("command").toString()));
      }
      if (!jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if (!jsonObj.get("serviceAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccountName").toString()));
      }
      // validate the optional field `storage`
      if (jsonObj.get("storage") != null && !jsonObj.get("storage").isJsonNull()) {
        Storage.validateJsonObject(jsonObj.getAsJsonObject("storage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VelaCliSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VelaCliSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VelaCliSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VelaCliSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<VelaCliSpec>() {
           @Override
           public void write(JsonWriter out, VelaCliSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VelaCliSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VelaCliSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VelaCliSpec
  * @throws IOException if the JSON string is invalid with respect to VelaCliSpec
  */
  public static VelaCliSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VelaCliSpec.class);
  }

 /**
  * Convert an instance of VelaCliSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

